{"ast":null,"code":"class Ball {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.radius = 8;\n    this.dx = 4;\n    this.dy = -4;\n    this.speed = Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n    this.initialX = x;\n    this.initialY = y;\n  }\n  update() {\n    // Update position\n    this.x += this.dx;\n    this.y += this.dy;\n\n    // Wall collision\n    if (this.x + this.radius > 800 || this.x - this.radius < 0) {\n      this.dx = -this.dx;\n    }\n    if (this.y - this.radius < 0) {\n      this.dy = -this.dy;\n    }\n  }\n  checkCollision(paddle) {\n    return this.y + this.radius > paddle.y && this.y - this.radius < paddle.y + paddle.height && this.x + this.radius > paddle.x && this.x - this.radius < paddle.x + paddle.width;\n  }\n  bounceOffPaddle(paddle) {\n    // Calculate relative intersection point\n    const relativeIntersectX = paddle.x + paddle.width / 2 - this.x;\n    const normalizedIntersect = relativeIntersectX / (paddle.width / 2);\n\n    // Calculate new angle (maximum 75 degrees)\n    const maxBounceAngle = Math.PI / 3;\n    const bounceAngle = normalizedIntersect * maxBounceAngle;\n\n    // Update velocity while maintaining speed\n    this.dx = this.speed * -Math.sin(bounceAngle);\n    this.dy = this.speed * -Math.cos(bounceAngle);\n  }\n  bounceOffBrick(brick) {\n    // Determine which side of the brick was hit\n    const hitLeft = this.x + this.radius - this.dx <= brick.x;\n    const hitRight = this.x - this.radius - this.dx >= brick.x + brick.width;\n    const hitTop = this.y + this.radius - this.dy <= brick.y;\n    const hitBottom = this.y - this.radius - this.dy >= brick.y + brick.height;\n\n    // Bounce based on the side hit\n    if (hitLeft || hitRight) {\n      this.dx = -this.dx;\n    }\n    if (hitTop || hitBottom) {\n      this.dy = -this.dy;\n    }\n\n    // If corner hit (both vertical and horizontal collision), ensure consistent bounce\n    if ((hitLeft || hitRight) && (hitTop || hitBottom)) {\n      this.dx = -this.dx;\n      this.dy = -this.dy;\n    }\n  }\n  reset() {\n    this.x = this.initialX;\n    this.y = this.initialY;\n    this.dx = 4;\n    this.dy = -4;\n    this.speed = Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n  }\n  setSpeed(newSpeed) {\n    const currentSpeed = Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n    this.dx = this.dx / currentSpeed * newSpeed;\n    this.dy = this.dy / currentSpeed * newSpeed;\n    this.speed = newSpeed;\n  }\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.fill();\n    ctx.closePath();\n  }\n}\nexport default Ball;","map":{"version":3,"names":["Ball","constructor","x","y","radius","dx","dy","speed","Math","sqrt","initialX","initialY","update","checkCollision","paddle","height","width","bounceOffPaddle","relativeIntersectX","normalizedIntersect","maxBounceAngle","PI","bounceAngle","sin","cos","bounceOffBrick","brick","hitLeft","hitRight","hitTop","hitBottom","reset","setSpeed","newSpeed","currentSpeed","draw","ctx","beginPath","arc","fillStyle","fill","closePath"],"sources":["c:/Users/noahm/OneDrive/Desktop/Coding/brick_blaster2/client/src/components/Game/entities/Ball.js"],"sourcesContent":["class Ball {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.radius = 8;\n    this.dx = 4;\n    this.dy = -4;\n    this.speed = Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n    this.initialX = x;\n    this.initialY = y;\n  }\n\n  update() {\n    // Update position\n    this.x += this.dx;\n    this.y += this.dy;\n\n    // Wall collision\n    if (this.x + this.radius > 800 || this.x - this.radius < 0) {\n      this.dx = -this.dx;\n    }\n    if (this.y - this.radius < 0) {\n      this.dy = -this.dy;\n    }\n  }\n\n  checkCollision(paddle) {\n    return (\n      this.y + this.radius > paddle.y &&\n      this.y - this.radius < paddle.y + paddle.height &&\n      this.x + this.radius > paddle.x &&\n      this.x - this.radius < paddle.x + paddle.width\n    );\n  }\n\n  bounceOffPaddle(paddle) {\n    // Calculate relative intersection point\n    const relativeIntersectX = (paddle.x + (paddle.width / 2)) - this.x;\n    const normalizedIntersect = relativeIntersectX / (paddle.width / 2);\n    \n    // Calculate new angle (maximum 75 degrees)\n    const maxBounceAngle = Math.PI / 3;\n    const bounceAngle = normalizedIntersect * maxBounceAngle;\n    \n    // Update velocity while maintaining speed\n    this.dx = this.speed * -Math.sin(bounceAngle);\n    this.dy = this.speed * -Math.cos(bounceAngle);\n  }\n\n  bounceOffBrick(brick) {\n    // Determine which side of the brick was hit\n    const hitLeft = this.x + this.radius - this.dx <= brick.x;\n    const hitRight = this.x - this.radius - this.dx >= brick.x + brick.width;\n    const hitTop = this.y + this.radius - this.dy <= brick.y;\n    const hitBottom = this.y - this.radius - this.dy >= brick.y + brick.height;\n\n    // Bounce based on the side hit\n    if (hitLeft || hitRight) {\n      this.dx = -this.dx;\n    }\n    if (hitTop || hitBottom) {\n      this.dy = -this.dy;\n    }\n\n    // If corner hit (both vertical and horizontal collision), ensure consistent bounce\n    if ((hitLeft || hitRight) && (hitTop || hitBottom)) {\n      this.dx = -this.dx;\n      this.dy = -this.dy;\n    }\n  }\n\n  reset() {\n    this.x = this.initialX;\n    this.y = this.initialY;\n    this.dx = 4;\n    this.dy = -4;\n    this.speed = Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n  }\n\n  setSpeed(newSpeed) {\n    const currentSpeed = Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n    this.dx = (this.dx / currentSpeed) * newSpeed;\n    this.dy = (this.dy / currentSpeed) * newSpeed;\n    this.speed = newSpeed;\n  }\n\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.fill();\n    ctx.closePath();\n  }\n}\n\nexport default Ball;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}