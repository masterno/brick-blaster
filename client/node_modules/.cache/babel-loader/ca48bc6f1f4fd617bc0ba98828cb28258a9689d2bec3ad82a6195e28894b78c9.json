{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noahm\\\\OneDrive\\\\Desktop\\\\Coding\\\\brick_blaster2\\\\client\\\\src\\\\components\\\\Game\\\\GameCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Ball from './entities/Ball';\nimport Paddle from './entities/Paddle';\nimport Brick from './entities/Brick'; // Import Brick\nimport { useGameLoop } from './GameLoop';\nimport LevelManager from './LevelManager';\nimport PauseMenu from '../UI/PauseMenu';\nimport GameOver from '../UI/GameOver';\nimport SoundManager from '../../utils/SoundManager';\nimport '../../styles/components/GameCanvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameCanvas = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const canvasRef = useRef(null);\n  const gameObjectsRef = useRef(null);\n  const requestIdRef = useRef({\n    id: null,\n    lastTime: null\n  });\n  const levelManagerRef = useRef(new LevelManager());\n  const soundManagerRef = useRef(null);\n\n  // Get the selected level from navigation state, default to 1\n  const initialLevel = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.selectedLevel) || 1;\n  const {\n    isPaused,\n    isGameOver,\n    setScore,\n    score,\n    lives,\n    setLives,\n    currentLevel,\n    setCurrentLevel,\n    setIsPaused,\n    setIsGameOver,\n    setIsVictory,\n    isVictory,\n    resetLevel\n  } = useGameLoop(initialLevel);\n\n  // Initialize level manager and sound manager\n  useEffect(() => {\n    levelManagerRef.current = new LevelManager();\n    soundManagerRef.current = new SoundManager();\n\n    // Set initial level\n    setCurrentLevel(initialLevel);\n    return () => {\n      if (soundManagerRef.current) {\n        soundManagerRef.current.cleanup();\n      }\n    };\n  }, [initialLevel, setCurrentLevel]);\n  const drawHUD = useCallback(ctx => {\n    ctx.save();\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '20px Arial';\n\n    // Draw score\n    ctx.textAlign = 'left';\n    ctx.fillText(`Score: ${score}`, 10, 30);\n\n    // Draw level\n    ctx.textAlign = 'center';\n    ctx.fillText(`Level ${currentLevel}`, canvasRef.current.width / 2, 30);\n\n    // Draw lives\n    ctx.textAlign = 'right';\n    ctx.fillText(`Lives: ${lives}`, canvasRef.current.width - 10, 30);\n    ctx.restore();\n  }, [score, lives, currentLevel]);\n  const handleBallOut = useCallback(() => {\n    const newLives = lives - 1;\n    setLives(newLives);\n    if (newLives <= 0) {\n      setIsGameOver(true);\n      setIsVictory(false);\n      resetLevel();\n    }\n    resetBallAndPaddle();\n  }, [lives, setLives, setIsGameOver, setIsVictory, resetLevel, resetBallAndPaddle]);\n  const resetBallAndPaddle = useCallback(() => {\n    if (!gameObjectsRef.current || !canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const paddleY = canvas.height - 40;\n    const paddleWidth = 100;\n\n    // Reset paddle position\n    gameObjectsRef.current.paddle.x = canvas.width / 2 - paddleWidth / 2;\n    gameObjectsRef.current.paddle.y = paddleY;\n\n    // Reset ball position and state\n    gameObjectsRef.current.ball.reset();\n  }, []);\n  const resetLevelState = useCallback(() => {\n    if (!gameObjectsRef.current) return;\n\n    // Get fresh level data for the current level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    gameObjectsRef.current.bricks = levelData.bricks.map(brick => new Brick(brick.x, brick.y, brick.width, brick.height, brick.type));\n    resetBallAndPaddle();\n  }, [currentLevel, resetBallAndPaddle]);\n  const drawGameObjects = useCallback((ctx, objects) => {\n    if (!ctx || !objects) return;\n    ctx.save();\n    objects.bricks.forEach(brick => {\n      if (!brick.isDestroyed()) {\n        brick.draw(ctx);\n      }\n    });\n    objects.ball.draw(ctx);\n    objects.paddle.draw(ctx);\n    ctx.restore();\n  }, []);\n  const handleKeyDown = useCallback(e => {\n    if (isGameOver) return;\n    const objects = gameObjectsRef.current;\n    switch (e.key.toLowerCase()) {\n      case 'a':\n      case 'arrowleft':\n        if (!isPaused) objects.paddle.moveLeft();\n        break;\n      case 'd':\n      case 'arrowright':\n        if (!isPaused) objects.paddle.moveRight();\n        break;\n      case ' ':\n        if (e.code === 'Space') {\n          if (isGameOver) {\n            resetLevel();\n            return;\n          }\n          if (gameObjectsRef.current && !gameObjectsRef.current.ball.isLaunched) {\n            gameObjectsRef.current.ball.launch();\n          }\n        }\n        break;\n      case 'escape':\n        setIsPaused(prev => !prev);\n        break;\n      default:\n        break;\n    }\n  }, [isPaused, isGameOver, setIsPaused]);\n  const handleKeyUp = useCallback(e => {\n    if (isGameOver || isPaused) return;\n    const objects = gameObjectsRef.current;\n    switch (e.key.toLowerCase()) {\n      case 'a':\n      case 'arrowleft':\n        objects.paddle.stopLeft();\n        break;\n      case 'd':\n      case 'arrowright':\n        objects.paddle.stopRight();\n        break;\n      default:\n        break;\n    }\n  }, [isPaused, isGameOver]);\n  const handleResume = useCallback(() => {\n    setIsPaused(false);\n  }, [setIsPaused]);\n  const handleRestart = useCallback(() => {\n    // Reset game state\n    setIsPaused(false);\n    setIsGameOver(false);\n    setIsVictory(false);\n    setScore(0);\n    setLives(3);\n    setCurrentLevel(1);\n\n    // Reset level manager to ensure fresh state\n    levelManagerRef.current = new LevelManager();\n\n    // Reset game objects and level\n    resetLevelState();\n    resetBallAndPaddle();\n\n    // Ensure ball is not launched\n    if (gameObjectsRef.current) {\n      gameObjectsRef.current.ball.isLaunched = false;\n    }\n  }, [setIsPaused, setIsGameOver, setIsVictory, setScore, setLives, setCurrentLevel, resetLevelState, resetBallAndPaddle]);\n  useEffect(() => {\n    if (!gameObjectsRef.current) return;\n    console.log('Level changed to:', currentLevel);\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    gameObjectsRef.current.bricks = levelData.bricks.map(brick => new Brick(brick.x, brick.y, brick.width, brick.height, brick.type));\n    resetBallAndPaddle();\n  }, [currentLevel, resetBallAndPaddle]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    canvas.width = 800;\n    canvas.height = 600;\n\n    // Initialize game objects\n    const paddleY = canvas.height - 40;\n    const paddleWidth = 100;\n    gameObjectsRef.current = {\n      paddle: new Paddle(canvas.width / 2 - paddleWidth / 2, paddleY),\n      ball: new Ball(canvas.width / 2, paddleY - 10),\n      bricks: []\n    };\n\n    // Load initial level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    gameObjectsRef.current.bricks = levelData.bricks;\n    const ctx = canvas.getContext('2d', {\n      alpha: false\n    });\n    if (!ctx) return;\n    const animate = timestamp => {\n      if (isPaused || isGameOver) return;\n      const deltaTime = timestamp - (requestIdRef.current.lastTime || timestamp);\n      requestIdRef.current.lastTime = timestamp;\n\n      // Clear canvas\n      ctx.fillStyle = '#000000';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      const objects = gameObjectsRef.current;\n      if (!objects) return;\n      let remainingBricks = 0;\n\n      // Update game objects\n      if (objects.ball.y + objects.ball.radius > canvas.height) {\n        handleBallOut();\n      } else {\n        objects.ball.update(deltaTime / 1000);\n        objects.paddle.update(deltaTime);\n\n        // Handle paddle collision before updating ball\n        if (objects.ball.checkPaddleCollision(objects.paddle)) {\n          objects.ball.bounceOffPaddle(objects.paddle);\n          if (soundManagerRef.current) {\n            soundManagerRef.current.playPaddleHit();\n          }\n        }\n\n        // Only stick to paddle if not launched\n        if (!objects.ball.isLaunched) {\n          objects.ball.stickToPaddle(objects.paddle);\n        }\n\n        // Check brick collisions\n        for (const brick of objects.bricks) {\n          if (!brick.isDestroyed()) {\n            remainingBricks++;\n            if (objects.ball.checkBrickCollision(brick)) {\n              objects.ball.bounceOffBrick(brick);\n              if (brick.hit()) {\n                setScore(prev => prev + 100);\n                if (soundManagerRef.current) {\n                  soundManagerRef.current.playBrickHit();\n                }\n              }\n              break;\n            }\n          }\n        }\n\n        // Check if level is complete\n        if (objects.bricks.length > 0 && remainingBricks === 0) {\n          console.log('Level complete! Current level:', currentLevel);\n          const nextLevel = currentLevel + 1;\n          console.log('Attempting to transition to level:', nextLevel);\n          console.log('Max level:', levelManagerRef.current.getMaxLevel());\n          if (nextLevel <= levelManagerRef.current.getMaxLevel()) {\n            console.log('Starting next level');\n            setCurrentLevel(nextLevel);\n            // Level change effect will handle resetting ball and bricks\n          } else {\n            console.log('Game complete!');\n            setIsGameOver(true);\n            setIsVictory(true);\n            resetLevelState();\n          }\n        }\n      }\n\n      // Draw game objects\n      drawGameObjects(ctx, objects);\n      drawHUD(ctx);\n\n      // Request next frame\n      requestIdRef.current.id = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    requestIdRef.current.id = requestAnimationFrame(animate);\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      if (requestIdRef.current.id) {\n        cancelAnimationFrame(requestIdRef.current.id);\n      }\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [drawGameObjects, drawHUD, handleBallOut, isPaused, isGameOver, setCurrentLevel, setIsGameOver, setIsVictory, setScore, currentLevel, resetLevelState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"game-canvas\",\n        width: 800,\n        height: 600,\n        tabIndex: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), isPaused && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pause-overlay\",\n        children: /*#__PURE__*/_jsxDEV(PauseMenu, {\n          onResume: handleResume,\n          onRestart: handleRestart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over-overlay\",\n        children: /*#__PURE__*/_jsxDEV(GameOver, {\n          score: score,\n          level: currentLevel,\n          onRestart: handleRestart,\n          isVictory: isVictory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 336,\n    columnNumber: 5\n  }, this);\n};\n_s(GameCanvas, \"L85Td0qHCfjo7EUnV4AtrVnHkV4=\", false, function () {\n  return [useLocation, useGameLoop];\n});\n_c = GameCanvas;\nexport default GameCanvas;\nvar _c;\n$RefreshReg$(_c, \"GameCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","useCallback","useLocation","Ball","Paddle","Brick","useGameLoop","LevelManager","PauseMenu","GameOver","SoundManager","jsxDEV","_jsxDEV","GameCanvas","_s","_location$state","location","canvasRef","gameObjectsRef","requestIdRef","id","lastTime","levelManagerRef","soundManagerRef","initialLevel","state","selectedLevel","isPaused","isGameOver","setScore","score","lives","setLives","currentLevel","setCurrentLevel","setIsPaused","setIsGameOver","setIsVictory","isVictory","resetLevel","current","cleanup","drawHUD","ctx","save","fillStyle","font","textAlign","fillText","width","restore","handleBallOut","newLives","resetBallAndPaddle","canvas","paddleY","height","paddleWidth","paddle","x","y","ball","reset","resetLevelState","levelData","loadLevel","bricks","map","brick","type","drawGameObjects","objects","forEach","isDestroyed","draw","handleKeyDown","e","key","toLowerCase","moveLeft","moveRight","code","isLaunched","launch","prev","handleKeyUp","stopLeft","stopRight","handleResume","handleRestart","console","log","getContext","alpha","animate","timestamp","deltaTime","fillRect","remainingBricks","radius","update","checkPaddleCollision","bounceOffPaddle","playPaddleHit","stickToPaddle","checkBrickCollision","bounceOffBrick","hit","playBrickHit","length","nextLevel","getMaxLevel","requestAnimationFrame","window","addEventListener","cancelAnimationFrame","removeEventListener","className","children","ref","tabIndex","fileName","_jsxFileName","lineNumber","columnNumber","onResume","onRestart","level","_c","$RefreshReg$"],"sources":["C:/Users/noahm/OneDrive/Desktop/Coding/brick_blaster2/client/src/components/Game/GameCanvas.js"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Ball from './entities/Ball';\nimport Paddle from './entities/Paddle';\nimport Brick from './entities/Brick'; // Import Brick\nimport { useGameLoop } from './GameLoop';\nimport LevelManager from './LevelManager';\nimport PauseMenu from '../UI/PauseMenu';\nimport GameOver from '../UI/GameOver';\nimport SoundManager from '../../utils/SoundManager';\nimport '../../styles/components/GameCanvas.css';\n\nconst GameCanvas = () => {\n  const location = useLocation();\n  const canvasRef = useRef(null);\n  const gameObjectsRef = useRef(null);\n  const requestIdRef = useRef({ id: null, lastTime: null });\n  const levelManagerRef = useRef(new LevelManager());\n  const soundManagerRef = useRef(null);\n\n  // Get the selected level from navigation state, default to 1\n  const initialLevel = location.state?.selectedLevel || 1;\n\n  const {\n    isPaused,\n    isGameOver,\n    setScore,\n    score,\n    lives,\n    setLives,\n    currentLevel,\n    setCurrentLevel,\n    setIsPaused,\n    setIsGameOver,\n    setIsVictory,\n    isVictory,\n    resetLevel\n  } = useGameLoop(initialLevel);\n\n  // Initialize level manager and sound manager\n  useEffect(() => {\n    levelManagerRef.current = new LevelManager();\n    soundManagerRef.current = new SoundManager();\n    \n    // Set initial level\n    setCurrentLevel(initialLevel);\n    \n    return () => {\n      if (soundManagerRef.current) {\n        soundManagerRef.current.cleanup();\n      }\n    };\n  }, [initialLevel, setCurrentLevel]);\n\n  const drawHUD = useCallback((ctx) => {\n    ctx.save();\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '20px Arial';\n    \n    // Draw score\n    ctx.textAlign = 'left';\n    ctx.fillText(`Score: ${score}`, 10, 30);\n    \n    // Draw level\n    ctx.textAlign = 'center';\n    ctx.fillText(`Level ${currentLevel}`, canvasRef.current.width / 2, 30);\n    \n    // Draw lives\n    ctx.textAlign = 'right';\n    ctx.fillText(`Lives: ${lives}`, canvasRef.current.width - 10, 30);\n    ctx.restore();\n  }, [score, lives, currentLevel]);\n\n  const handleBallOut = useCallback(() => {\n    const newLives = lives - 1;\n    setLives(newLives);\n    \n    if (newLives <= 0) {\n      setIsGameOver(true);\n      setIsVictory(false);\n      resetLevel();\n    }\n    resetBallAndPaddle();\n  }, [lives, setLives, setIsGameOver, setIsVictory, resetLevel, resetBallAndPaddle]);\n\n  const resetBallAndPaddle = useCallback(() => {\n    if (!gameObjectsRef.current || !canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const paddleY = canvas.height - 40;\n    const paddleWidth = 100;\n    \n    // Reset paddle position\n    gameObjectsRef.current.paddle.x = canvas.width / 2 - paddleWidth / 2;\n    gameObjectsRef.current.paddle.y = paddleY;\n    \n    // Reset ball position and state\n    gameObjectsRef.current.ball.reset();\n  }, []);\n\n  const resetLevelState = useCallback(() => {\n    if (!gameObjectsRef.current) return;\n\n    // Get fresh level data for the current level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    gameObjectsRef.current.bricks = levelData.bricks.map(brick => \n      new Brick(brick.x, brick.y, brick.width, brick.height, brick.type)\n    );\n    \n    resetBallAndPaddle();\n  }, [currentLevel, resetBallAndPaddle]);\n\n  const drawGameObjects = useCallback((ctx, objects) => {\n    if (!ctx || !objects) return;\n    \n    ctx.save();\n    objects.bricks.forEach(brick => {\n      if (!brick.isDestroyed()) {\n        brick.draw(ctx);\n      }\n    });\n    objects.ball.draw(ctx);\n    objects.paddle.draw(ctx);\n    ctx.restore();\n  }, []);\n\n  const handleKeyDown = useCallback((e) => {\n    if (isGameOver) return;\n    \n    const objects = gameObjectsRef.current;\n    switch (e.key.toLowerCase()) {\n      case 'a':\n      case 'arrowleft':\n        if (!isPaused) objects.paddle.moveLeft();\n        break;\n      case 'd':\n      case 'arrowright':\n        if (!isPaused) objects.paddle.moveRight();\n        break;\n      case ' ':\n        if (e.code === 'Space') {\n          if (isGameOver) {\n            resetLevel();\n            return;\n          }\n          if (gameObjectsRef.current && !gameObjectsRef.current.ball.isLaunched) {\n            gameObjectsRef.current.ball.launch();\n          }\n        }\n        break;\n      case 'escape':\n        setIsPaused(prev => !prev);\n        break;\n      default:\n        break;\n    }\n  }, [isPaused, isGameOver, setIsPaused]);\n\n  const handleKeyUp = useCallback((e) => {\n    if (isGameOver || isPaused) return;\n    \n    const objects = gameObjectsRef.current;\n    switch (e.key.toLowerCase()) {\n      case 'a':\n      case 'arrowleft':\n        objects.paddle.stopLeft();\n        break;\n      case 'd':\n      case 'arrowright':\n        objects.paddle.stopRight();\n        break;\n      default:\n        break;\n    }\n  }, [isPaused, isGameOver]);\n\n  const handleResume = useCallback(() => {\n    setIsPaused(false);\n  }, [setIsPaused]);\n\n  const handleRestart = useCallback(() => {\n    // Reset game state\n    setIsPaused(false);\n    setIsGameOver(false);\n    setIsVictory(false);\n    setScore(0);\n    setLives(3);\n    setCurrentLevel(1);\n    \n    // Reset level manager to ensure fresh state\n    levelManagerRef.current = new LevelManager();\n    \n    // Reset game objects and level\n    resetLevelState();\n    resetBallAndPaddle();\n    \n    // Ensure ball is not launched\n    if (gameObjectsRef.current) {\n      gameObjectsRef.current.ball.isLaunched = false;\n    }\n  }, [setIsPaused, setIsGameOver, setIsVictory, setScore, setLives, setCurrentLevel, resetLevelState, resetBallAndPaddle]);\n\n  useEffect(() => {\n    if (!gameObjectsRef.current) return;\n    \n    console.log('Level changed to:', currentLevel);\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    gameObjectsRef.current.bricks = levelData.bricks.map(brick => \n      new Brick(brick.x, brick.y, brick.width, brick.height, brick.type)\n    );\n    resetBallAndPaddle();\n  }, [currentLevel, resetBallAndPaddle]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    canvas.width = 800;\n    canvas.height = 600;\n\n    // Initialize game objects\n    const paddleY = canvas.height - 40;\n    const paddleWidth = 100;\n    \n    gameObjectsRef.current = {\n      paddle: new Paddle(canvas.width / 2 - paddleWidth / 2, paddleY),\n      ball: new Ball(canvas.width / 2, paddleY - 10),\n      bricks: []\n    };\n\n    // Load initial level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    gameObjectsRef.current.bricks = levelData.bricks;\n\n    const ctx = canvas.getContext('2d', { alpha: false });\n    if (!ctx) return;\n\n    const animate = (timestamp) => {\n      if (isPaused || isGameOver) return;\n\n      const deltaTime = timestamp - (requestIdRef.current.lastTime || timestamp);\n      requestIdRef.current.lastTime = timestamp;\n\n      // Clear canvas\n      ctx.fillStyle = '#000000';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      const objects = gameObjectsRef.current;\n      if (!objects) return;\n\n      let remainingBricks = 0;\n\n      // Update game objects\n      if (objects.ball.y + objects.ball.radius > canvas.height) {\n        handleBallOut();\n      } else {\n        objects.ball.update(deltaTime / 1000);\n        objects.paddle.update(deltaTime);\n        \n        // Handle paddle collision before updating ball\n        if (objects.ball.checkPaddleCollision(objects.paddle)) {\n          objects.ball.bounceOffPaddle(objects.paddle);\n          if (soundManagerRef.current) {\n            soundManagerRef.current.playPaddleHit();\n          }\n        }\n\n        // Only stick to paddle if not launched\n        if (!objects.ball.isLaunched) {\n          objects.ball.stickToPaddle(objects.paddle);\n        }\n\n        // Check brick collisions\n        for (const brick of objects.bricks) {\n          if (!brick.isDestroyed()) {\n            remainingBricks++;\n            if (objects.ball.checkBrickCollision(brick)) {\n              objects.ball.bounceOffBrick(brick);\n              if (brick.hit()) {\n                setScore(prev => prev + 100);\n                if (soundManagerRef.current) {\n                  soundManagerRef.current.playBrickHit();\n                }\n              }\n              break;\n            }\n          }\n        }\n\n        // Check if level is complete\n        if (objects.bricks.length > 0 && remainingBricks === 0) {\n          console.log('Level complete! Current level:', currentLevel);\n          const nextLevel = currentLevel + 1;\n          console.log('Attempting to transition to level:', nextLevel);\n          console.log('Max level:', levelManagerRef.current.getMaxLevel());\n          \n          if (nextLevel <= levelManagerRef.current.getMaxLevel()) {\n            console.log('Starting next level');\n            setCurrentLevel(nextLevel);\n            // Level change effect will handle resetting ball and bricks\n          } else {\n            console.log('Game complete!');\n            setIsGameOver(true);\n            setIsVictory(true);\n            resetLevelState();\n          }\n        }\n      }\n\n      // Draw game objects\n      drawGameObjects(ctx, objects);\n      drawHUD(ctx);\n\n      // Request next frame\n      requestIdRef.current.id = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    requestIdRef.current.id = requestAnimationFrame(animate);\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      if (requestIdRef.current.id) {\n        cancelAnimationFrame(requestIdRef.current.id);\n      }\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [drawGameObjects, drawHUD, handleBallOut, isPaused, isGameOver, \n      setCurrentLevel, setIsGameOver, setIsVictory, setScore, \n      currentLevel, resetLevelState]);\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"canvas-wrapper\">\n        <canvas\n          ref={canvasRef}\n          className=\"game-canvas\"\n          width={800}\n          height={600}\n          tabIndex={0}\n        />\n        {isPaused && (\n          <div className=\"pause-overlay\">\n            <PauseMenu\n              onResume={handleResume}\n              onRestart={handleRestart}\n            />\n          </div>\n        )}\n        {isGameOver && (\n          <div className=\"game-over-overlay\">\n            <GameOver\n              score={score}\n              level={currentLevel}\n              onRestart={handleRestart}\n              isVictory={isVictory}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GameCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}