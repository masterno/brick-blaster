{"ast":null,"code":"class Ball {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.radius = 8;\n    this.baseSpeed = 400;\n    this.speed = this.baseSpeed;\n    this.dx = 0;\n    this.dy = 0;\n    this.isLaunched = false;\n    this.canvasWidth = 800;\n    this.canvasHeight = 600;\n    this.initialX = x;\n    this.initialY = y;\n  }\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.fill();\n    ctx.closePath();\n  }\n  update(deltaTime) {\n    if (!this.isLaunched) return;\n\n    // Update position\n    const newX = this.x + this.dx * deltaTime;\n    const newY = this.y + this.dy * deltaTime;\n\n    // Wall collisions\n    if (newX - this.radius <= 0) {\n      this.x = this.radius;\n      this.dx = Math.abs(this.dx);\n    } else if (newX + this.radius >= this.canvasWidth) {\n      this.x = this.canvasWidth - this.radius;\n      this.dx = -Math.abs(this.dx);\n    } else {\n      this.x = newX;\n    }\n    if (newY - this.radius <= 0) {\n      this.y = this.radius;\n      this.dy = Math.abs(this.dy);\n    } else {\n      this.y = newY;\n    }\n\n    // Normalize speed\n    const currentSpeed = Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n    if (Math.abs(currentSpeed - this.speed) > 0.1) {\n      const speedFactor = this.speed / currentSpeed;\n      this.dx *= speedFactor;\n      this.dy *= speedFactor;\n    }\n  }\n  launch() {\n    if (!this.isLaunched) {\n      this.isLaunched = true;\n      const angle = -Math.PI / 4; // -45 degrees\n      this.dx = this.speed * Math.cos(angle);\n      this.dy = this.speed * Math.sin(angle);\n    }\n  }\n  reset() {\n    this.x = this.initialX;\n    this.y = this.initialY;\n    this.dx = 0;\n    this.dy = 0;\n    this.isLaunched = false;\n    this.speed = this.baseSpeed;\n  }\n  stickToPaddle(paddle) {\n    if (!this.isLaunched) {\n      this.x = paddle.x + paddle.width / 2;\n      this.y = paddle.y - this.radius;\n    }\n  }\n  bounceOffPaddle(paddle) {\n    if (!this.isLaunched) return;\n\n    // Calculate relative position of ball hit on paddle\n    const relativeIntersectX = (this.x - (paddle.x + paddle.width / 2)) / (paddle.width / 2);\n\n    // Calculate bounce angle (-60 to 60 degrees)\n    const bounceAngle = relativeIntersectX * Math.PI / 3;\n\n    // Set new velocity\n    this.dx = this.speed * Math.sin(bounceAngle);\n    this.dy = -Math.abs(this.speed * Math.cos(bounceAngle));\n\n    // Ensure ball is above paddle\n    this.y = paddle.y - this.radius;\n  }\n  bounceOffBrick(brick) {\n    // Calculate the center points of the ball and brick\n    const ballCenterX = this.x;\n    const ballCenterY = this.y;\n    const brickCenterX = brick.x + brick.width / 2;\n    const brickCenterY = brick.y + brick.height / 2;\n\n    // Calculate the difference between centers\n    const dx = ballCenterX - brickCenterX;\n    const dy = ballCenterY - brickCenterY;\n\n    // Determine which side of the brick was hit\n    if (Math.abs(dx) > Math.abs(dy)) {\n      // Horizontal collision\n      this.dx = Math.abs(this.dx) * (dx > 0 ? 1 : -1);\n    } else {\n      // Vertical collision\n      this.dy = Math.abs(this.dy) * (dy > 0 ? 1 : -1);\n    }\n  }\n  checkPaddleCollision(paddle) {\n    return this.isLaunched && this.x + this.radius > paddle.x && this.x - this.radius < paddle.x + paddle.width && this.y + this.radius > paddle.y && this.y - this.radius < paddle.y + paddle.height;\n  }\n  checkBrickCollision(brick) {\n    if (brick.isDestroyed()) return false;\n\n    // Calculate the closest point on the brick to the ball\n    const closestX = Math.max(brick.x, Math.min(this.x, brick.x + brick.width));\n    const closestY = Math.max(brick.y, Math.min(this.y, brick.y + brick.height));\n\n    // Calculate the distance between the ball's center and this closest point\n    const distanceX = this.x - closestX;\n    const distanceY = this.y - closestY;\n    const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);\n\n    // If the distance is less than the ball's radius, collision detected\n    return distance <= this.radius;\n  }\n}\nexport default Ball;","map":{"version":3,"names":["Ball","constructor","x","y","radius","baseSpeed","speed","dx","dy","isLaunched","canvasWidth","canvasHeight","initialX","initialY","draw","ctx","beginPath","arc","Math","PI","fillStyle","fill","closePath","update","deltaTime","newX","newY","abs","currentSpeed","sqrt","speedFactor","launch","angle","cos","sin","reset","stickToPaddle","paddle","width","bounceOffPaddle","relativeIntersectX","bounceAngle","bounceOffBrick","brick","ballCenterX","ballCenterY","brickCenterX","brickCenterY","height","checkPaddleCollision","checkBrickCollision","isDestroyed","closestX","max","min","closestY","distanceX","distanceY","distance"],"sources":["C:/Users/noahm/OneDrive/Desktop/Coding/brick_blaster2/client/src/components/Game/entities/Ball.js"],"sourcesContent":["class Ball {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.radius = 8;\n    this.baseSpeed = 400;\n    this.speed = this.baseSpeed;\n    this.dx = 0;\n    this.dy = 0;\n    this.isLaunched = false;\n    this.canvasWidth = 800;\n    this.canvasHeight = 600;\n    this.initialX = x;\n    this.initialY = y;\n  }\n\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  update(deltaTime) {\n    if (!this.isLaunched) return;\n\n    // Update position\n    const newX = this.x + this.dx * deltaTime;\n    const newY = this.y + this.dy * deltaTime;\n\n    // Wall collisions\n    if (newX - this.radius <= 0) {\n      this.x = this.radius;\n      this.dx = Math.abs(this.dx);\n    } else if (newX + this.radius >= this.canvasWidth) {\n      this.x = this.canvasWidth - this.radius;\n      this.dx = -Math.abs(this.dx);\n    } else {\n      this.x = newX;\n    }\n\n    if (newY - this.radius <= 0) {\n      this.y = this.radius;\n      this.dy = Math.abs(this.dy);\n    } else {\n      this.y = newY;\n    }\n\n    // Normalize speed\n    const currentSpeed = Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n    if (Math.abs(currentSpeed - this.speed) > 0.1) {\n      const speedFactor = this.speed / currentSpeed;\n      this.dx *= speedFactor;\n      this.dy *= speedFactor;\n    }\n  }\n\n  launch() {\n    if (!this.isLaunched) {\n      this.isLaunched = true;\n      const angle = -Math.PI / 4; // -45 degrees\n      this.dx = this.speed * Math.cos(angle);\n      this.dy = this.speed * Math.sin(angle);\n    }\n  }\n\n  reset() {\n    this.x = this.initialX;\n    this.y = this.initialY;\n    this.dx = 0;\n    this.dy = 0;\n    this.isLaunched = false;\n    this.speed = this.baseSpeed;\n  }\n\n  stickToPaddle(paddle) {\n    if (!this.isLaunched) {\n      this.x = paddle.x + paddle.width / 2;\n      this.y = paddle.y - this.radius;\n    }\n  }\n\n  bounceOffPaddle(paddle) {\n    if (!this.isLaunched) return;\n\n    // Calculate relative position of ball hit on paddle\n    const relativeIntersectX = (this.x - (paddle.x + paddle.width / 2)) / (paddle.width / 2);\n    \n    // Calculate bounce angle (-60 to 60 degrees)\n    const bounceAngle = relativeIntersectX * Math.PI / 3;\n    \n    // Set new velocity\n    this.dx = this.speed * Math.sin(bounceAngle);\n    this.dy = -Math.abs(this.speed * Math.cos(bounceAngle));\n    \n    // Ensure ball is above paddle\n    this.y = paddle.y - this.radius;\n  }\n\n  bounceOffBrick(brick) {\n    // Calculate the center points of the ball and brick\n    const ballCenterX = this.x;\n    const ballCenterY = this.y;\n    const brickCenterX = brick.x + brick.width / 2;\n    const brickCenterY = brick.y + brick.height / 2;\n\n    // Calculate the difference between centers\n    const dx = ballCenterX - brickCenterX;\n    const dy = ballCenterY - brickCenterY;\n\n    // Determine which side of the brick was hit\n    if (Math.abs(dx) > Math.abs(dy)) {\n      // Horizontal collision\n      this.dx = Math.abs(this.dx) * (dx > 0 ? 1 : -1);\n    } else {\n      // Vertical collision\n      this.dy = Math.abs(this.dy) * (dy > 0 ? 1 : -1);\n    }\n  }\n\n  checkPaddleCollision(paddle) {\n    return (\n      this.isLaunched &&\n      this.x + this.radius > paddle.x &&\n      this.x - this.radius < paddle.x + paddle.width &&\n      this.y + this.radius > paddle.y &&\n      this.y - this.radius < paddle.y + paddle.height\n    );\n  }\n\n  checkBrickCollision(brick) {\n    if (brick.isDestroyed()) return false;\n\n    // Calculate the closest point on the brick to the ball\n    const closestX = Math.max(brick.x, Math.min(this.x, brick.x + brick.width));\n    const closestY = Math.max(brick.y, Math.min(this.y, brick.y + brick.height));\n\n    // Calculate the distance between the ball's center and this closest point\n    const distanceX = this.x - closestX;\n    const distanceY = this.y - closestY;\n    const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);\n\n    // If the distance is less than the ball's radius, collision detected\n    return distance <= this.radius;\n  }\n}\n\nexport default Ball;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}