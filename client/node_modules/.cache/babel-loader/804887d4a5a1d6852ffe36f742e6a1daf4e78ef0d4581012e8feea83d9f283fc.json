{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noahm\\\\OneDrive\\\\Desktop\\\\Coding\\\\brick_blaster2\\\\client\\\\src\\\\components\\\\Game\\\\GameCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Ball from './entities/Ball';\nimport Paddle from './entities/Paddle';\nimport LevelManager from './LevelManager';\nimport PauseMenu from '../UI/PauseMenu';\nimport GameOver from '../UI/GameOver';\nimport SoundManager from '../../utils/SoundManager';\nimport '../../styles/components/GameCanvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameCanvas = ({\n  lives,\n  setLives,\n  score,\n  setScore,\n  currentLevel,\n  setCurrentLevel,\n  isPaused,\n  setIsPaused,\n  isGameOver,\n  setIsGameOver,\n  isVictory,\n  setIsVictory\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const gameObjectsRef = useRef(null);\n  const requestIdRef = useRef({\n    id: null,\n    lastTime: 0\n  });\n  const levelManagerRef = useRef(new LevelManager());\n  const soundManagerRef = useRef(null);\n\n  // Initialize sound manager\n  useEffect(() => {\n    soundManagerRef.current = new SoundManager();\n    return () => {\n      if (soundManagerRef.current) {\n        soundManagerRef.current.cleanup();\n      }\n    };\n  }, []);\n  const drawHUD = useCallback(ctx => {\n    if (!ctx || !canvasRef.current) return;\n    ctx.save();\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '20px Arial';\n\n    // Draw score\n    ctx.textAlign = 'left';\n    ctx.fillText(`Score: ${score}`, 10, 30);\n\n    // Draw level\n    ctx.textAlign = 'center';\n    ctx.fillText(`Level ${currentLevel}`, canvasRef.current.width / 2, 30);\n\n    // Draw lives\n    ctx.textAlign = 'right';\n    ctx.fillText(`Lives: ${lives}`, canvasRef.current.width - 10, 30);\n    ctx.restore();\n  }, [score, lives, currentLevel]);\n  const resetBallAndPaddle = useCallback(() => {\n    if (!gameObjectsRef.current || !canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const objects = gameObjectsRef.current;\n\n    // Reset paddle position and state\n    objects.paddle.x = canvas.width / 2 - objects.paddle.width / 2;\n    objects.paddle.y = canvas.height - 40;\n    objects.paddle.leftPressed = false;\n    objects.paddle.rightPressed = false;\n\n    // Reset ball position and state\n    objects.ball.x = canvas.width / 2;\n    objects.ball.y = canvas.height - 60;\n    objects.ball.dx = 0;\n    objects.ball.dy = 0;\n    objects.ball.isLaunched = false;\n  }, []);\n  const resetLevelState = useCallback(() => {\n    if (!gameObjectsRef.current) return;\n\n    // Get fresh level data for the current level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n\n    // Replace the entire bricks array with fresh instances\n    gameObjectsRef.current.bricks = levelData.bricks;\n    resetBallAndPaddle();\n  }, [currentLevel, resetBallAndPaddle]);\n  const handleRestart = useCallback(() => {\n    setIsPaused(false);\n    setIsGameOver(false);\n    setIsVictory(false);\n    setScore(0);\n    setLives(3);\n    setCurrentLevel(1);\n\n    // Reset level manager to ensure fresh state\n    levelManagerRef.current = new LevelManager();\n    resetLevelState();\n  }, [resetLevelState, setCurrentLevel, setIsGameOver, setIsVictory, setIsPaused, setLives, setScore]);\n  const handleBallOut = useCallback(() => {\n    const newLives = lives - 1;\n    setLives(newLives);\n    if (newLives <= 0) {\n      setIsGameOver(true);\n      setIsVictory(false);\n      setIsPaused(false);\n    } else {\n      resetBallAndPaddle();\n    }\n  }, [lives, setLives, setIsGameOver, setIsVictory, setIsPaused, resetBallAndPaddle]);\n  const handleKeyDown = useCallback(e => {\n    const objects = gameObjectsRef.current;\n    if (!objects) return;\n    if (e.code === 'Space') {\n      if (isGameOver) {\n        handleRestart();\n      } else {\n        setIsPaused(prev => !prev);\n      }\n      return;\n    }\n    if (isPaused || isGameOver) return;\n    switch (e.code) {\n      case 'ArrowLeft':\n        objects.paddle.moveLeft();\n        break;\n      case 'ArrowRight':\n        objects.paddle.moveRight();\n        break;\n      default:\n        break;\n    }\n  }, [isGameOver, isPaused, handleRestart, setIsPaused]);\n  const handleKeyUp = useCallback(e => {\n    const objects = gameObjectsRef.current;\n    if (!objects) return;\n    switch (e.code) {\n      case 'ArrowLeft':\n        objects.paddle.stopLeft();\n        break;\n      case 'ArrowRight':\n        objects.paddle.stopRight();\n        break;\n      default:\n        break;\n    }\n  }, []);\n  const handleResume = useCallback(() => {\n    setIsPaused(false);\n  }, [setIsPaused]);\n  const drawGameObjects = useCallback(ctx => {\n    if (!ctx || !gameObjectsRef.current) return;\n    const objects = gameObjectsRef.current;\n    ctx.save();\n\n    // Draw bricks\n    objects.bricks.forEach(brick => {\n      if (!brick.isDestroyed()) {\n        brick.draw(ctx);\n      }\n    });\n\n    // Draw paddle and ball\n    objects.paddle.draw(ctx);\n    objects.ball.draw(ctx);\n    ctx.restore();\n  }, []);\n  const animate = useCallback(timestamp => {\n    var _canvasRef$current;\n    if (isPaused || isGameOver) return;\n    const deltaTime = timestamp - (requestIdRef.current.lastTime || timestamp);\n    requestIdRef.current.lastTime = timestamp;\n    const ctx = (_canvasRef$current = canvasRef.current) === null || _canvasRef$current === void 0 ? void 0 : _canvasRef$current.getContext('2d', {\n      alpha: false\n    });\n    const objects = gameObjectsRef.current;\n    if (!ctx || !objects) return;\n\n    // Clear canvas\n    ctx.fillStyle = '#000000';\n    ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n    // Update game objects\n    if (objects.ball.y + objects.ball.radius > canvasRef.current.height) {\n      handleBallOut();\n    } else {\n      objects.paddle.update(deltaTime / 1000);\n      objects.ball.update(deltaTime / 1000);\n\n      // Handle paddle collision\n      if (objects.ball.checkPaddleCollision(objects.paddle)) {\n        objects.ball.bounceOffPaddle(objects.paddle);\n        if (soundManagerRef.current) {\n          soundManagerRef.current.playPaddleHit();\n        }\n      }\n\n      // Only stick to paddle if not launched\n      if (!objects.ball.isLaunched) {\n        objects.ball.stickToPaddle(objects.paddle);\n      }\n\n      // Check brick collisions\n      let remainingBricks = 0;\n      let brickHit = false;\n\n      // Create a new array to store updated bricks\n      const updatedBricks = [];\n      for (const brick of objects.bricks) {\n        if (!brick.isDestroyed()) {\n          remainingBricks++;\n          if (!brickHit && objects.ball.checkBrickCollision(brick)) {\n            objects.ball.bounceOffBrick(brick);\n            brickHit = true;\n            if (brick.hit()) {\n              setScore(prev => prev + 100);\n              if (soundManagerRef.current) {\n                soundManagerRef.current.playBrickHit();\n              }\n            }\n          }\n        }\n        updatedBricks.push(brick);\n      }\n\n      // Update the bricks array with the new state\n      objects.bricks = updatedBricks;\n\n      // Check if level is complete\n      if (objects.bricks.length > 0 && remainingBricks === 0) {\n        const nextLevel = currentLevel + 1;\n        if (nextLevel <= levelManagerRef.current.getMaxLevel()) {\n          setCurrentLevel(nextLevel);\n        } else {\n          setIsGameOver(true);\n          setIsVictory(true);\n        }\n      }\n    }\n\n    // Draw game objects\n    drawGameObjects(ctx);\n    drawHUD(ctx);\n\n    // Request next frame\n    requestIdRef.current.id = requestAnimationFrame(animate);\n  }, [drawGameObjects, drawHUD, handleBallOut, currentLevel, isPaused, isGameOver, setCurrentLevel, setIsGameOver, setIsVictory, setScore]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    canvas.width = 800;\n    canvas.height = 600;\n\n    // Initialize game objects\n    gameObjectsRef.current = {\n      paddle: new Paddle(canvas.width / 2 - 50, canvas.height - 40),\n      ball: new Ball(canvas.width / 2, canvas.height - 60),\n      bricks: []\n    };\n\n    // Load initial level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    gameObjectsRef.current.bricks = levelData.bricks;\n\n    // Store ref value for cleanup\n    const currentRequestId = requestIdRef.current;\n\n    // Start animation\n    currentRequestId.id = requestAnimationFrame(animate);\n\n    // Add event listeners\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      if (currentRequestId.id) {\n        cancelAnimationFrame(currentRequestId.id);\n      }\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [currentLevel, handleKeyDown, handleKeyUp, animate]);\n\n  // Effect to handle level changes\n  useEffect(() => {\n    if (!gameObjectsRef.current) return;\n\n    // Get fresh level data and reset level state\n    resetLevelState();\n  }, [currentLevel, resetLevelState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"game-canvas\",\n        width: 800,\n        height: 600,\n        tabIndex: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), isPaused && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pause-overlay\",\n        children: /*#__PURE__*/_jsxDEV(PauseMenu, {\n          onResume: handleResume,\n          onRestart: handleRestart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over-overlay\",\n        children: /*#__PURE__*/_jsxDEV(GameOver, {\n          score: score,\n          level: currentLevel,\n          onRestart: handleRestart,\n          isVictory: isVictory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 310,\n    columnNumber: 5\n  }, this);\n};\n_s(GameCanvas, \"um59VMhr/Jhl7RW59DN52ibQCC8=\");\n_c = GameCanvas;\nexport default GameCanvas;\nvar _c;\n$RefreshReg$(_c, \"GameCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useCallback","useLocation","Ball","Paddle","LevelManager","PauseMenu","GameOver","SoundManager","jsxDEV","_jsxDEV","GameCanvas","lives","setLives","score","setScore","currentLevel","setCurrentLevel","isPaused","setIsPaused","isGameOver","setIsGameOver","isVictory","setIsVictory","_s","canvasRef","gameObjectsRef","requestIdRef","id","lastTime","levelManagerRef","soundManagerRef","current","cleanup","drawHUD","ctx","save","fillStyle","font","textAlign","fillText","width","restore","resetBallAndPaddle","canvas","objects","paddle","x","y","height","leftPressed","rightPressed","ball","dx","dy","isLaunched","resetLevelState","levelData","loadLevel","bricks","handleRestart","handleBallOut","newLives","handleKeyDown","e","code","prev","moveLeft","moveRight","handleKeyUp","stopLeft","stopRight","handleResume","drawGameObjects","forEach","brick","isDestroyed","draw","animate","timestamp","_canvasRef$current","deltaTime","getContext","alpha","fillRect","radius","update","checkPaddleCollision","bounceOffPaddle","playPaddleHit","stickToPaddle","remainingBricks","brickHit","updatedBricks","checkBrickCollision","bounceOffBrick","hit","playBrickHit","push","length","nextLevel","getMaxLevel","requestAnimationFrame","currentRequestId","window","addEventListener","cancelAnimationFrame","removeEventListener","className","children","ref","tabIndex","fileName","_jsxFileName","lineNumber","columnNumber","onResume","onRestart","level","_c","$RefreshReg$"],"sources":["C:/Users/noahm/OneDrive/Desktop/Coding/brick_blaster2/client/src/components/Game/GameCanvas.js"],"sourcesContent":["import React, { useRef, useEffect, useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Ball from './entities/Ball';\nimport Paddle from './entities/Paddle';\nimport LevelManager from './LevelManager';\nimport PauseMenu from '../UI/PauseMenu';\nimport GameOver from '../UI/GameOver';\nimport SoundManager from '../../utils/SoundManager';\nimport '../../styles/components/GameCanvas.css';\n\nconst GameCanvas = ({ \n  lives, setLives, \n  score, setScore, \n  currentLevel, setCurrentLevel,\n  isPaused, setIsPaused,\n  isGameOver, setIsGameOver,\n  isVictory, setIsVictory \n}) => {\n  const canvasRef = useRef(null);\n  const gameObjectsRef = useRef(null);\n  const requestIdRef = useRef({ id: null, lastTime: 0 });\n  const levelManagerRef = useRef(new LevelManager());\n  const soundManagerRef = useRef(null);\n\n  // Initialize sound manager\n  useEffect(() => {\n    soundManagerRef.current = new SoundManager();\n    return () => {\n      if (soundManagerRef.current) {\n        soundManagerRef.current.cleanup();\n      }\n    };\n  }, []);\n\n  const drawHUD = useCallback((ctx) => {\n    if (!ctx || !canvasRef.current) return;\n    \n    ctx.save();\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '20px Arial';\n    \n    // Draw score\n    ctx.textAlign = 'left';\n    ctx.fillText(`Score: ${score}`, 10, 30);\n    \n    // Draw level\n    ctx.textAlign = 'center';\n    ctx.fillText(`Level ${currentLevel}`, canvasRef.current.width / 2, 30);\n    \n    // Draw lives\n    ctx.textAlign = 'right';\n    ctx.fillText(`Lives: ${lives}`, canvasRef.current.width - 10, 30);\n    ctx.restore();\n  }, [score, lives, currentLevel]);\n\n  const resetBallAndPaddle = useCallback(() => {\n    if (!gameObjectsRef.current || !canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const objects = gameObjectsRef.current;\n    \n    // Reset paddle position and state\n    objects.paddle.x = canvas.width / 2 - objects.paddle.width / 2;\n    objects.paddle.y = canvas.height - 40;\n    objects.paddle.leftPressed = false;\n    objects.paddle.rightPressed = false;\n    \n    // Reset ball position and state\n    objects.ball.x = canvas.width / 2;\n    objects.ball.y = canvas.height - 60;\n    objects.ball.dx = 0;\n    objects.ball.dy = 0;\n    objects.ball.isLaunched = false;\n  }, []);\n\n  const resetLevelState = useCallback(() => {\n    if (!gameObjectsRef.current) return;\n\n    // Get fresh level data for the current level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    \n    // Replace the entire bricks array with fresh instances\n    gameObjectsRef.current.bricks = levelData.bricks;\n\n    resetBallAndPaddle();\n  }, [currentLevel, resetBallAndPaddle]);\n\n  const handleRestart = useCallback(() => {\n    setIsPaused(false);\n    setIsGameOver(false);\n    setIsVictory(false);\n    setScore(0);\n    setLives(3);\n    setCurrentLevel(1);\n    \n    // Reset level manager to ensure fresh state\n    levelManagerRef.current = new LevelManager();\n    resetLevelState();\n  }, [resetLevelState, setCurrentLevel, setIsGameOver, setIsVictory, setIsPaused, setLives, setScore]);\n\n  const handleBallOut = useCallback(() => {\n    const newLives = lives - 1;\n    setLives(newLives);\n    \n    if (newLives <= 0) {\n      setIsGameOver(true);\n      setIsVictory(false);\n      setIsPaused(false);\n    } else {\n      resetBallAndPaddle();\n    }\n  }, [lives, setLives, setIsGameOver, setIsVictory, setIsPaused, resetBallAndPaddle]);\n\n  const handleKeyDown = useCallback((e) => {\n    const objects = gameObjectsRef.current;\n    if (!objects) return;\n\n    if (e.code === 'Space') {\n      if (isGameOver) {\n        handleRestart();\n      } else {\n        setIsPaused(prev => !prev);\n      }\n      return;\n    }\n\n    if (isPaused || isGameOver) return;\n\n    switch (e.code) {\n      case 'ArrowLeft':\n        objects.paddle.moveLeft();\n        break;\n      case 'ArrowRight':\n        objects.paddle.moveRight();\n        break;\n      default:\n        break;\n    }\n  }, [isGameOver, isPaused, handleRestart, setIsPaused]);\n\n  const handleKeyUp = useCallback((e) => {\n    const objects = gameObjectsRef.current;\n    if (!objects) return;\n\n    switch (e.code) {\n      case 'ArrowLeft':\n        objects.paddle.stopLeft();\n        break;\n      case 'ArrowRight':\n        objects.paddle.stopRight();\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  const handleResume = useCallback(() => {\n    setIsPaused(false);\n  }, [setIsPaused]);\n\n  const drawGameObjects = useCallback((ctx) => {\n    if (!ctx || !gameObjectsRef.current) return;\n    \n    const objects = gameObjectsRef.current;\n    ctx.save();\n\n    // Draw bricks\n    objects.bricks.forEach(brick => {\n      if (!brick.isDestroyed()) {\n        brick.draw(ctx);\n      }\n    });\n\n    // Draw paddle and ball\n    objects.paddle.draw(ctx);\n    objects.ball.draw(ctx);\n\n    ctx.restore();\n  }, []);\n\n  const animate = useCallback((timestamp) => {\n    if (isPaused || isGameOver) return;\n\n    const deltaTime = timestamp - (requestIdRef.current.lastTime || timestamp);\n    requestIdRef.current.lastTime = timestamp;\n\n    const ctx = canvasRef.current?.getContext('2d', { alpha: false });\n    const objects = gameObjectsRef.current;\n\n    if (!ctx || !objects) return;\n\n    // Clear canvas\n    ctx.fillStyle = '#000000';\n    ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n    // Update game objects\n    if (objects.ball.y + objects.ball.radius > canvasRef.current.height) {\n      handleBallOut();\n    } else {\n      objects.paddle.update(deltaTime / 1000);\n      objects.ball.update(deltaTime / 1000);\n\n      // Handle paddle collision\n      if (objects.ball.checkPaddleCollision(objects.paddle)) {\n        objects.ball.bounceOffPaddle(objects.paddle);\n        if (soundManagerRef.current) {\n          soundManagerRef.current.playPaddleHit();\n        }\n      }\n\n      // Only stick to paddle if not launched\n      if (!objects.ball.isLaunched) {\n        objects.ball.stickToPaddle(objects.paddle);\n      }\n\n      // Check brick collisions\n      let remainingBricks = 0;\n      let brickHit = false;\n\n      // Create a new array to store updated bricks\n      const updatedBricks = [];\n\n      for (const brick of objects.bricks) {\n        if (!brick.isDestroyed()) {\n          remainingBricks++;\n          if (!brickHit && objects.ball.checkBrickCollision(brick)) {\n            objects.ball.bounceOffBrick(brick);\n            brickHit = true;\n            if (brick.hit()) {\n              setScore(prev => prev + 100);\n              if (soundManagerRef.current) {\n                soundManagerRef.current.playBrickHit();\n              }\n            }\n          }\n        }\n        updatedBricks.push(brick);\n      }\n\n      // Update the bricks array with the new state\n      objects.bricks = updatedBricks;\n\n      // Check if level is complete\n      if (objects.bricks.length > 0 && remainingBricks === 0) {\n        const nextLevel = currentLevel + 1;\n        if (nextLevel <= levelManagerRef.current.getMaxLevel()) {\n          setCurrentLevel(nextLevel);\n        } else {\n          setIsGameOver(true);\n          setIsVictory(true);\n        }\n      }\n    }\n\n    // Draw game objects\n    drawGameObjects(ctx);\n    drawHUD(ctx);\n\n    // Request next frame\n    requestIdRef.current.id = requestAnimationFrame(animate);\n  }, [drawGameObjects, drawHUD, handleBallOut, currentLevel, isPaused, isGameOver, \n      setCurrentLevel, setIsGameOver, setIsVictory, setScore]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    canvas.width = 800;\n    canvas.height = 600;\n\n    // Initialize game objects\n    gameObjectsRef.current = {\n      paddle: new Paddle(canvas.width / 2 - 50, canvas.height - 40),\n      ball: new Ball(canvas.width / 2, canvas.height - 60),\n      bricks: []\n    };\n\n    // Load initial level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    gameObjectsRef.current.bricks = levelData.bricks;\n\n    // Store ref value for cleanup\n    const currentRequestId = requestIdRef.current;\n\n    // Start animation\n    currentRequestId.id = requestAnimationFrame(animate);\n\n    // Add event listeners\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      if (currentRequestId.id) {\n        cancelAnimationFrame(currentRequestId.id);\n      }\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [currentLevel, handleKeyDown, handleKeyUp, animate]);\n\n  // Effect to handle level changes\n  useEffect(() => {\n    if (!gameObjectsRef.current) return;\n    \n    // Get fresh level data and reset level state\n    resetLevelState();\n  }, [currentLevel, resetLevelState]);\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"canvas-wrapper\">\n        <canvas\n          ref={canvasRef}\n          className=\"game-canvas\"\n          width={800}\n          height={600}\n          tabIndex={0}\n        />\n        {isPaused && (\n          <div className=\"pause-overlay\">\n            <PauseMenu\n              onResume={handleResume}\n              onRestart={handleRestart}\n            />\n          </div>\n        )}\n        {isGameOver && (\n          <div className=\"game-over-overlay\">\n            <GameOver\n              score={score}\n              level={currentLevel}\n              onRestart={handleRestart}\n              isVictory={isVictory}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GameCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}