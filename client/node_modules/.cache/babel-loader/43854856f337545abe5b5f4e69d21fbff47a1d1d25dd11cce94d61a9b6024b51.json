{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noahm\\\\OneDrive\\\\Desktop\\\\Coding\\\\brick_blaster2\\\\client\\\\src\\\\components\\\\Game\\\\GameCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Ball from './entities/Ball';\nimport Paddle from './entities/Paddle';\nimport Brick from './entities/Brick'; // Import Brick\nimport { useGameLoop } from './GameLoop';\nimport LevelManager from './LevelManager';\nimport PauseMenu from '../UI/PauseMenu';\nimport GameOver from '../UI/GameOver';\nimport SoundManager from '../../utils/SoundManager';\nimport '../../styles/components/GameCanvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameCanvas = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const canvasRef = useRef(null);\n  const gameObjectsRef = useRef(null);\n  const requestIdRef = useRef({\n    id: null,\n    lastTime: 0\n  });\n  const levelManagerRef = useRef(new LevelManager());\n  const soundManagerRef = useRef(null);\n\n  // Get the selected level from navigation state, default to 1\n  const initialLevel = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.selectedLevel) || 1;\n  const {\n    isPaused,\n    isGameOver,\n    setScore,\n    score,\n    lives,\n    setLives,\n    currentLevel,\n    setCurrentLevel,\n    setIsPaused,\n    setIsGameOver,\n    setIsVictory,\n    isVictory,\n    resetLevel\n  } = useGameLoop(initialLevel);\n\n  // Initialize sound manager\n  useEffect(() => {\n    soundManagerRef.current = new SoundManager();\n    return () => {\n      if (soundManagerRef.current) {\n        soundManagerRef.current.cleanup();\n      }\n    };\n  }, []);\n  const drawHUD = useCallback(ctx => {\n    if (!ctx || !canvasRef.current) return;\n    ctx.save();\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '20px Arial';\n\n    // Draw score\n    ctx.textAlign = 'left';\n    ctx.fillText(`Score: ${score}`, 10, 30);\n\n    // Draw level\n    ctx.textAlign = 'center';\n    ctx.fillText(`Level ${currentLevel}`, canvasRef.current.width / 2, 30);\n\n    // Draw lives\n    ctx.textAlign = 'right';\n    ctx.fillText(`Lives: ${lives}`, canvasRef.current.width - 10, 30);\n    ctx.restore();\n  }, [score, lives, currentLevel]);\n  const resetBallAndPaddle = useCallback(() => {\n    if (!gameObjectsRef.current || !canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const objects = gameObjectsRef.current;\n\n    // Reset paddle position and state\n    objects.paddle.x = canvas.width / 2 - objects.paddle.width / 2;\n    objects.paddle.y = canvas.height - 40;\n    objects.paddle.leftPressed = false;\n    objects.paddle.rightPressed = false;\n\n    // Reset ball position and state\n    objects.ball.x = canvas.width / 2;\n    objects.ball.y = canvas.height - 60;\n    objects.ball.dx = 0;\n    objects.ball.dy = 0;\n    objects.ball.isLaunched = false;\n  }, []);\n  const resetLevelState = useCallback(() => {\n    if (!gameObjectsRef.current) return;\n\n    // Get fresh level data for the current level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n\n    // Replace the entire bricks array with fresh instances\n    gameObjectsRef.current.bricks = levelData.bricks;\n    resetBallAndPaddle();\n  }, [currentLevel, resetBallAndPaddle]);\n  const handleRestart = useCallback(() => {\n    setIsPaused(false);\n    setIsGameOver(false);\n    setIsVictory(false);\n    setScore(0);\n    setLives(3);\n    setCurrentLevel(1);\n\n    // Reset level manager to ensure fresh state\n    levelManagerRef.current = new LevelManager();\n    resetLevelState();\n  }, [setIsPaused, setIsGameOver, setIsVictory, setScore, setLives, setCurrentLevel, resetLevelState]);\n  const handleBallOut = useCallback(() => {\n    const newLives = lives - 1;\n    setLives(newLives);\n    if (newLives <= 0) {\n      setIsGameOver(true);\n      setIsVictory(false);\n      handleRestart();\n    } else {\n      resetBallAndPaddle();\n    }\n  }, [lives, setLives, setIsGameOver, setIsVictory, handleRestart, resetBallAndPaddle]);\n  const handleKeyDown = useCallback(e => {\n    const objects = gameObjectsRef.current;\n    if (!objects) return;\n    const key = e.key.toLowerCase();\n    switch (key) {\n      case 'arrowleft':\n        if (!isPaused) objects.paddle.moveLeft();\n        break;\n      case 'arrowright':\n        if (!isPaused) objects.paddle.moveRight();\n        break;\n      case ' ':\n        if (isGameOver) {\n          handleRestart();\n        } else if (!isPaused && objects.ball && !objects.ball.isLaunched) {\n          objects.ball.launch();\n        }\n        break;\n      case 'escape':\n        setIsPaused(!isPaused);\n        break;\n      default:\n        break;\n    }\n  }, [isPaused, isGameOver, handleRestart]);\n  const handleKeyUp = useCallback(e => {\n    const objects = gameObjectsRef.current;\n    if (!objects) return;\n    const key = e.key.toLowerCase();\n    switch (key) {\n      case 'arrowleft':\n        objects.paddle.stopLeft();\n        break;\n      case 'arrowright':\n        objects.paddle.stopRight();\n        break;\n      default:\n        break;\n    }\n  }, []);\n  const handleResume = useCallback(() => {\n    setIsPaused(false);\n  }, [setIsPaused]);\n  const drawGameObjects = useCallback(ctx => {\n    if (!ctx || !gameObjectsRef.current) return;\n    const objects = gameObjectsRef.current;\n    ctx.save();\n\n    // Draw bricks\n    objects.bricks.forEach(brick => {\n      if (!brick.isDestroyed()) {\n        brick.draw(ctx);\n      }\n    });\n\n    // Draw paddle and ball\n    objects.paddle.draw(ctx);\n    objects.ball.draw(ctx);\n    ctx.restore();\n  }, []);\n  const animate = useCallback(timestamp => {\n    var _canvasRef$current;\n    if (isPaused || isGameOver) return;\n    const deltaTime = timestamp - (requestIdRef.current.lastTime || timestamp);\n    requestIdRef.current.lastTime = timestamp;\n    const ctx = (_canvasRef$current = canvasRef.current) === null || _canvasRef$current === void 0 ? void 0 : _canvasRef$current.getContext('2d', {\n      alpha: false\n    });\n    const objects = gameObjectsRef.current;\n    if (!ctx || !objects) return;\n\n    // Clear canvas\n    ctx.fillStyle = '#000000';\n    ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n    // Update game objects\n    if (objects.ball.y + objects.ball.radius > canvasRef.current.height) {\n      handleBallOut();\n    } else {\n      objects.paddle.update(deltaTime / 1000);\n      objects.ball.update(deltaTime / 1000);\n\n      // Handle paddle collision\n      if (objects.ball.checkPaddleCollision(objects.paddle)) {\n        objects.ball.bounceOffPaddle(objects.paddle);\n        if (soundManagerRef.current) {\n          soundManagerRef.current.playPaddleHit();\n        }\n      }\n\n      // Only stick to paddle if not launched\n      if (!objects.ball.isLaunched) {\n        objects.ball.stickToPaddle(objects.paddle);\n      }\n\n      // Check brick collisions\n      let remainingBricks = 0;\n      let brickHit = false;\n\n      // Create a new array to store updated bricks\n      const updatedBricks = [];\n      for (const brick of objects.bricks) {\n        if (!brick.isDestroyed()) {\n          remainingBricks++;\n          if (!brickHit && objects.ball.checkBrickCollision(brick)) {\n            objects.ball.bounceOffBrick(brick);\n            brickHit = true;\n            if (brick.hit()) {\n              setScore(prev => prev + 100);\n              if (soundManagerRef.current) {\n                soundManagerRef.current.playBrickHit();\n              }\n            }\n          }\n        }\n        updatedBricks.push(brick);\n      }\n\n      // Update the bricks array with the new state\n      objects.bricks = updatedBricks;\n\n      // Check if level is complete\n      if (objects.bricks.length > 0 && remainingBricks === 0) {\n        const nextLevel = currentLevel + 1;\n        if (nextLevel <= levelManagerRef.current.getMaxLevel()) {\n          setCurrentLevel(nextLevel);\n        } else {\n          setIsGameOver(true);\n          setIsVictory(true);\n        }\n      }\n    }\n\n    // Draw game objects\n    drawGameObjects(ctx);\n    drawHUD(ctx);\n\n    // Request next frame\n    requestIdRef.current.id = requestAnimationFrame(animate);\n  }, [drawGameObjects, drawHUD, handleBallOut, currentLevel, isPaused, isGameOver, setCurrentLevel, setIsGameOver, setIsVictory, setScore]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    canvas.width = 800;\n    canvas.height = 600;\n\n    // Initialize game objects\n    gameObjectsRef.current = {\n      paddle: new Paddle(canvas.width / 2 - 50, canvas.height - 40),\n      ball: new Ball(canvas.width / 2, canvas.height - 60),\n      bricks: []\n    };\n\n    // Load initial level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    gameObjectsRef.current.bricks = levelData.bricks;\n\n    // Start animation\n    requestIdRef.current.id = requestAnimationFrame(animate);\n\n    // Add event listeners\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      if (requestIdRef.current.id) {\n        cancelAnimationFrame(requestIdRef.current.id);\n      }\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [currentLevel, handleKeyDown, handleKeyUp, animate]);\n\n  // Effect to handle level changes\n  useEffect(() => {\n    if (!gameObjectsRef.current) return;\n\n    // Get fresh level data and reset level state\n    resetLevelState();\n  }, [currentLevel, resetLevelState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"game-canvas\",\n        width: 800,\n        height: 600,\n        tabIndex: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), isPaused && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pause-overlay\",\n        children: /*#__PURE__*/_jsxDEV(PauseMenu, {\n          onResume: handleResume,\n          onRestart: handleRestart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over-overlay\",\n        children: /*#__PURE__*/_jsxDEV(GameOver, {\n          score: score,\n          level: currentLevel,\n          onRestart: handleRestart,\n          isVictory: isVictory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 323,\n    columnNumber: 5\n  }, this);\n};\n_s(GameCanvas, \"kiOdS8pn4fHbzPL6hkhOe9zniX4=\", false, function () {\n  return [useLocation, useGameLoop];\n});\n_c = GameCanvas;\nexport default GameCanvas;\nvar _c;\n$RefreshReg$(_c, \"GameCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","useCallback","useLocation","Ball","Paddle","Brick","useGameLoop","LevelManager","PauseMenu","GameOver","SoundManager","jsxDEV","_jsxDEV","GameCanvas","_s","_location$state","location","canvasRef","gameObjectsRef","requestIdRef","id","lastTime","levelManagerRef","soundManagerRef","initialLevel","state","selectedLevel","isPaused","isGameOver","setScore","score","lives","setLives","currentLevel","setCurrentLevel","setIsPaused","setIsGameOver","setIsVictory","isVictory","resetLevel","current","cleanup","drawHUD","ctx","save","fillStyle","font","textAlign","fillText","width","restore","resetBallAndPaddle","canvas","objects","paddle","x","y","height","leftPressed","rightPressed","ball","dx","dy","isLaunched","resetLevelState","levelData","loadLevel","bricks","handleRestart","handleBallOut","newLives","handleKeyDown","e","key","toLowerCase","moveLeft","moveRight","launch","handleKeyUp","stopLeft","stopRight","handleResume","drawGameObjects","forEach","brick","isDestroyed","draw","animate","timestamp","_canvasRef$current","deltaTime","getContext","alpha","fillRect","radius","update","checkPaddleCollision","bounceOffPaddle","playPaddleHit","stickToPaddle","remainingBricks","brickHit","updatedBricks","checkBrickCollision","bounceOffBrick","hit","prev","playBrickHit","push","length","nextLevel","getMaxLevel","requestAnimationFrame","window","addEventListener","cancelAnimationFrame","removeEventListener","className","children","ref","tabIndex","fileName","_jsxFileName","lineNumber","columnNumber","onResume","onRestart","level","_c","$RefreshReg$"],"sources":["C:/Users/noahm/OneDrive/Desktop/Coding/brick_blaster2/client/src/components/Game/GameCanvas.js"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Ball from './entities/Ball';\nimport Paddle from './entities/Paddle';\nimport Brick from './entities/Brick'; // Import Brick\nimport { useGameLoop } from './GameLoop';\nimport LevelManager from './LevelManager';\nimport PauseMenu from '../UI/PauseMenu';\nimport GameOver from '../UI/GameOver';\nimport SoundManager from '../../utils/SoundManager';\nimport '../../styles/components/GameCanvas.css';\n\nconst GameCanvas = () => {\n  const location = useLocation();\n  const canvasRef = useRef(null);\n  const gameObjectsRef = useRef(null);\n  const requestIdRef = useRef({ id: null, lastTime: 0 });\n  const levelManagerRef = useRef(new LevelManager());\n  const soundManagerRef = useRef(null);\n\n  // Get the selected level from navigation state, default to 1\n  const initialLevel = location.state?.selectedLevel || 1;\n\n  const {\n    isPaused,\n    isGameOver,\n    setScore,\n    score,\n    lives,\n    setLives,\n    currentLevel,\n    setCurrentLevel,\n    setIsPaused,\n    setIsGameOver,\n    setIsVictory,\n    isVictory,\n    resetLevel\n  } = useGameLoop(initialLevel);\n\n  // Initialize sound manager\n  useEffect(() => {\n    soundManagerRef.current = new SoundManager();\n    return () => {\n      if (soundManagerRef.current) {\n        soundManagerRef.current.cleanup();\n      }\n    };\n  }, []);\n\n  const drawHUD = useCallback((ctx) => {\n    if (!ctx || !canvasRef.current) return;\n    \n    ctx.save();\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '20px Arial';\n    \n    // Draw score\n    ctx.textAlign = 'left';\n    ctx.fillText(`Score: ${score}`, 10, 30);\n    \n    // Draw level\n    ctx.textAlign = 'center';\n    ctx.fillText(`Level ${currentLevel}`, canvasRef.current.width / 2, 30);\n    \n    // Draw lives\n    ctx.textAlign = 'right';\n    ctx.fillText(`Lives: ${lives}`, canvasRef.current.width - 10, 30);\n    ctx.restore();\n  }, [score, lives, currentLevel]);\n\n  const resetBallAndPaddle = useCallback(() => {\n    if (!gameObjectsRef.current || !canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const objects = gameObjectsRef.current;\n    \n    // Reset paddle position and state\n    objects.paddle.x = canvas.width / 2 - objects.paddle.width / 2;\n    objects.paddle.y = canvas.height - 40;\n    objects.paddle.leftPressed = false;\n    objects.paddle.rightPressed = false;\n    \n    // Reset ball position and state\n    objects.ball.x = canvas.width / 2;\n    objects.ball.y = canvas.height - 60;\n    objects.ball.dx = 0;\n    objects.ball.dy = 0;\n    objects.ball.isLaunched = false;\n  }, []);\n\n  const resetLevelState = useCallback(() => {\n    if (!gameObjectsRef.current) return;\n\n    // Get fresh level data for the current level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    \n    // Replace the entire bricks array with fresh instances\n    gameObjectsRef.current.bricks = levelData.bricks;\n\n    resetBallAndPaddle();\n  }, [currentLevel, resetBallAndPaddle]);\n\n  const handleRestart = useCallback(() => {\n    setIsPaused(false);\n    setIsGameOver(false);\n    setIsVictory(false);\n    setScore(0);\n    setLives(3);\n    setCurrentLevel(1);\n    \n    // Reset level manager to ensure fresh state\n    levelManagerRef.current = new LevelManager();\n    resetLevelState();\n  }, [setIsPaused, setIsGameOver, setIsVictory, setScore, setLives, setCurrentLevel, resetLevelState]);\n\n  const handleBallOut = useCallback(() => {\n    const newLives = lives - 1;\n    setLives(newLives);\n    \n    if (newLives <= 0) {\n      setIsGameOver(true);\n      setIsVictory(false);\n      handleRestart();\n    } else {\n      resetBallAndPaddle();\n    }\n  }, [lives, setLives, setIsGameOver, setIsVictory, handleRestart, resetBallAndPaddle]);\n\n  const handleKeyDown = useCallback((e) => {\n    const objects = gameObjectsRef.current;\n    if (!objects) return;\n\n    const key = e.key.toLowerCase();\n    switch (key) {\n      case 'arrowleft':\n        if (!isPaused) objects.paddle.moveLeft();\n        break;\n      case 'arrowright':\n        if (!isPaused) objects.paddle.moveRight();\n        break;\n      case ' ':\n        if (isGameOver) {\n          handleRestart();\n        } else if (!isPaused && objects.ball && !objects.ball.isLaunched) {\n          objects.ball.launch();\n        }\n        break;\n      case 'escape':\n        setIsPaused(!isPaused);\n        break;\n      default:\n        break;\n    }\n  }, [isPaused, isGameOver, handleRestart]);\n\n  const handleKeyUp = useCallback((e) => {\n    const objects = gameObjectsRef.current;\n    if (!objects) return;\n\n    const key = e.key.toLowerCase();\n    switch (key) {\n      case 'arrowleft':\n        objects.paddle.stopLeft();\n        break;\n      case 'arrowright':\n        objects.paddle.stopRight();\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  const handleResume = useCallback(() => {\n    setIsPaused(false);\n  }, [setIsPaused]);\n\n  const drawGameObjects = useCallback((ctx) => {\n    if (!ctx || !gameObjectsRef.current) return;\n    \n    const objects = gameObjectsRef.current;\n    ctx.save();\n\n    // Draw bricks\n    objects.bricks.forEach(brick => {\n      if (!brick.isDestroyed()) {\n        brick.draw(ctx);\n      }\n    });\n\n    // Draw paddle and ball\n    objects.paddle.draw(ctx);\n    objects.ball.draw(ctx);\n\n    ctx.restore();\n  }, []);\n\n  const animate = useCallback((timestamp) => {\n    if (isPaused || isGameOver) return;\n\n    const deltaTime = timestamp - (requestIdRef.current.lastTime || timestamp);\n    requestIdRef.current.lastTime = timestamp;\n\n    const ctx = canvasRef.current?.getContext('2d', { alpha: false });\n    const objects = gameObjectsRef.current;\n\n    if (!ctx || !objects) return;\n\n    // Clear canvas\n    ctx.fillStyle = '#000000';\n    ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n    // Update game objects\n    if (objects.ball.y + objects.ball.radius > canvasRef.current.height) {\n      handleBallOut();\n    } else {\n      objects.paddle.update(deltaTime / 1000);\n      objects.ball.update(deltaTime / 1000);\n\n      // Handle paddle collision\n      if (objects.ball.checkPaddleCollision(objects.paddle)) {\n        objects.ball.bounceOffPaddle(objects.paddle);\n        if (soundManagerRef.current) {\n          soundManagerRef.current.playPaddleHit();\n        }\n      }\n\n      // Only stick to paddle if not launched\n      if (!objects.ball.isLaunched) {\n        objects.ball.stickToPaddle(objects.paddle);\n      }\n\n      // Check brick collisions\n      let remainingBricks = 0;\n      let brickHit = false;\n\n      // Create a new array to store updated bricks\n      const updatedBricks = [];\n\n      for (const brick of objects.bricks) {\n        if (!brick.isDestroyed()) {\n          remainingBricks++;\n          if (!brickHit && objects.ball.checkBrickCollision(brick)) {\n            objects.ball.bounceOffBrick(brick);\n            brickHit = true;\n            if (brick.hit()) {\n              setScore(prev => prev + 100);\n              if (soundManagerRef.current) {\n                soundManagerRef.current.playBrickHit();\n              }\n            }\n          }\n        }\n        updatedBricks.push(brick);\n      }\n\n      // Update the bricks array with the new state\n      objects.bricks = updatedBricks;\n\n      // Check if level is complete\n      if (objects.bricks.length > 0 && remainingBricks === 0) {\n        const nextLevel = currentLevel + 1;\n        if (nextLevel <= levelManagerRef.current.getMaxLevel()) {\n          setCurrentLevel(nextLevel);\n        } else {\n          setIsGameOver(true);\n          setIsVictory(true);\n        }\n      }\n    }\n\n    // Draw game objects\n    drawGameObjects(ctx);\n    drawHUD(ctx);\n\n    // Request next frame\n    requestIdRef.current.id = requestAnimationFrame(animate);\n  }, [drawGameObjects, drawHUD, handleBallOut, currentLevel, isPaused, isGameOver, \n      setCurrentLevel, setIsGameOver, setIsVictory, setScore]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    canvas.width = 800;\n    canvas.height = 600;\n\n    // Initialize game objects\n    gameObjectsRef.current = {\n      paddle: new Paddle(canvas.width / 2 - 50, canvas.height - 40),\n      ball: new Ball(canvas.width / 2, canvas.height - 60),\n      bricks: []\n    };\n\n    // Load initial level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    gameObjectsRef.current.bricks = levelData.bricks;\n\n    // Start animation\n    requestIdRef.current.id = requestAnimationFrame(animate);\n\n    // Add event listeners\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      if (requestIdRef.current.id) {\n        cancelAnimationFrame(requestIdRef.current.id);\n      }\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [currentLevel, handleKeyDown, handleKeyUp, animate]);\n\n  // Effect to handle level changes\n  useEffect(() => {\n    if (!gameObjectsRef.current) return;\n    \n    // Get fresh level data and reset level state\n    resetLevelState();\n  }, [currentLevel, resetLevelState]);\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"canvas-wrapper\">\n        <canvas\n          ref={canvasRef}\n          className=\"game-canvas\"\n          width={800}\n          height={600}\n          tabIndex={0}\n        />\n        {isPaused && (\n          <div className=\"pause-overlay\">\n            <PauseMenu\n              onResume={handleResume}\n              onRestart={handleRestart}\n            />\n          </div>\n        )}\n        {isGameOver && (\n          <div className=\"game-over-overlay\">\n            <GameOver\n              score={score}\n              level={currentLevel}\n              onRestart={handleRestart}\n              isVictory={isVictory}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GameCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}