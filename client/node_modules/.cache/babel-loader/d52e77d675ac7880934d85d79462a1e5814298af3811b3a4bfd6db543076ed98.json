{"ast":null,"code":"class SoundManager {\n  constructor() {\n    this.sounds = {};\n    this.initialized = false;\n    this.loadSounds();\n  }\n  async loadSounds() {\n    try {\n      // Create Audio objects\n      this.brickHitSound = new Audio();\n      this.paddleHitSound = new Audio();\n      this.ballLaunchSound = new Audio();\n\n      // Set sources\n      this.brickHitSound.src = '/sounds/brick_hit.wav';\n      this.paddleHitSound.src = '/sounds/paddle_hit.wav';\n      this.ballLaunchSound.src = '/sounds/paddle_hit.wav'; // Reusing paddle hit sound for now\n\n      // Add error handlers\n      this.brickHitSound.onerror = () => console.warn('Failed to load brick hit sound');\n      this.paddleHitSound.onerror = () => console.warn('Failed to load paddle hit sound');\n      this.ballLaunchSound.onerror = () => console.warn('Failed to load ball launch sound');\n\n      // Preload sounds\n      await Promise.all([this.brickHitSound.load(), this.paddleHitSound.load(), this.ballLaunchSound.load()]);\n      this.initialized = true;\n    } catch (error) {\n      console.warn('Error initializing sounds:', error);\n      // Set default values in case of failure\n      this.brickHitSound = {\n        play: () => {}\n      };\n      this.paddleHitSound = {\n        play: () => {}\n      };\n      this.ballLaunchSound = {\n        play: () => {}\n      };\n    }\n  }\n  playSound(sound, volume = 0.5) {\n    if (!sound) return;\n    try {\n      const clone = sound.cloneNode();\n      clone.volume = volume;\n      clone.play().catch(error => {\n        console.warn('Error playing sound:', error);\n      });\n    } catch (error) {\n      console.warn('Error cloning sound:', error);\n    }\n  }\n  playBrickHit() {\n    this.playSound(this.brickHitSound, 0.5);\n  }\n  playPaddleHit() {\n    this.playSound(this.paddleHitSound, 0.5);\n  }\n  playBallLaunch() {\n    this.playSound(this.ballLaunchSound, 0.3);\n  }\n  cleanup() {\n    try {\n      // Clean up audio resources\n      if (this.brickHitSound) {\n        this.brickHitSound.src = '';\n        this.brickHitSound = null;\n      }\n      if (this.paddleHitSound) {\n        this.paddleHitSound.src = '';\n        this.paddleHitSound = null;\n      }\n      if (this.ballLaunchSound) {\n        this.ballLaunchSound.src = '';\n        this.ballLaunchSound = null;\n      }\n      this.initialized = false;\n    } catch (error) {\n      console.warn('Error cleaning up sounds:', error);\n    }\n  }\n}\nexport default SoundManager;","map":{"version":3,"names":["SoundManager","constructor","sounds","initialized","loadSounds","brickHitSound","Audio","paddleHitSound","ballLaunchSound","src","onerror","console","warn","Promise","all","load","error","play","playSound","sound","volume","clone","cloneNode","catch","playBrickHit","playPaddleHit","playBallLaunch","cleanup"],"sources":["C:/Users/noahm/OneDrive/Desktop/Coding/brick_blaster2/client/src/utils/SoundManager.js"],"sourcesContent":["class SoundManager {\n  constructor() {\n    this.sounds = {};\n    this.initialized = false;\n    this.loadSounds();\n  }\n\n  async loadSounds() {\n    try {\n      // Create Audio objects\n      this.brickHitSound = new Audio();\n      this.paddleHitSound = new Audio();\n      this.ballLaunchSound = new Audio();\n\n      // Set sources\n      this.brickHitSound.src = '/sounds/brick_hit.wav';\n      this.paddleHitSound.src = '/sounds/paddle_hit.wav';\n      this.ballLaunchSound.src = '/sounds/paddle_hit.wav'; // Reusing paddle hit sound for now\n\n      // Add error handlers\n      this.brickHitSound.onerror = () => console.warn('Failed to load brick hit sound');\n      this.paddleHitSound.onerror = () => console.warn('Failed to load paddle hit sound');\n      this.ballLaunchSound.onerror = () => console.warn('Failed to load ball launch sound');\n\n      // Preload sounds\n      await Promise.all([\n        this.brickHitSound.load(),\n        this.paddleHitSound.load(),\n        this.ballLaunchSound.load()\n      ]);\n\n      this.initialized = true;\n    } catch (error) {\n      console.warn('Error initializing sounds:', error);\n      // Set default values in case of failure\n      this.brickHitSound = { play: () => {} };\n      this.paddleHitSound = { play: () => {} };\n      this.ballLaunchSound = { play: () => {} };\n    }\n  }\n\n  playSound(sound, volume = 0.5) {\n    if (!sound) return;\n    \n    try {\n      const clone = sound.cloneNode();\n      clone.volume = volume;\n      clone.play().catch(error => {\n        console.warn('Error playing sound:', error);\n      });\n    } catch (error) {\n      console.warn('Error cloning sound:', error);\n    }\n  }\n\n  playBrickHit() {\n    this.playSound(this.brickHitSound, 0.5);\n  }\n\n  playPaddleHit() {\n    this.playSound(this.paddleHitSound, 0.5);\n  }\n\n  playBallLaunch() {\n    this.playSound(this.ballLaunchSound, 0.3);\n  }\n\n  cleanup() {\n    try {\n      // Clean up audio resources\n      if (this.brickHitSound) {\n        this.brickHitSound.src = '';\n        this.brickHitSound = null;\n      }\n      if (this.paddleHitSound) {\n        this.paddleHitSound.src = '';\n        this.paddleHitSound = null;\n      }\n      if (this.ballLaunchSound) {\n        this.ballLaunchSound.src = '';\n        this.ballLaunchSound = null;\n      }\n      this.initialized = false;\n    } catch (error) {\n      console.warn('Error cleaning up sounds:', error);\n    }\n  }\n}\n\nexport default SoundManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}