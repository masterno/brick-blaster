{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noahm\\\\OneDrive\\\\Desktop\\\\Coding\\\\brick_blaster2\\\\client\\\\src\\\\components\\\\Game\\\\GameCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Ball from './entities/Ball';\nimport Paddle from './entities/Paddle';\nimport Brick from './entities/Brick'; // Import Brick\nimport { useGameLoop } from './GameLoop';\nimport LevelManager from './LevelManager';\nimport PauseMenu from '../UI/PauseMenu';\nimport GameOver from '../UI/GameOver';\nimport SoundManager from '../../utils/SoundManager';\nimport '../../styles/components/GameCanvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameCanvas = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const canvasRef = useRef(null);\n  const gameObjectsRef = useRef(null);\n  const requestIdRef = useRef({\n    id: null,\n    lastTime: null\n  });\n  const levelManagerRef = useRef(new LevelManager());\n  const soundManagerRef = useRef(null);\n\n  // Get the selected level from navigation state, default to 1\n  const initialLevel = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.selectedLevel) || 1;\n  const {\n    isPaused,\n    isGameOver,\n    setScore,\n    score,\n    lives,\n    setLives,\n    currentLevel,\n    setCurrentLevel,\n    setIsPaused,\n    setIsGameOver,\n    setIsVictory,\n    isVictory,\n    resetLevel\n  } = useGameLoop(initialLevel);\n\n  // Initialize level manager and sound manager\n  useEffect(() => {\n    levelManagerRef.current = new LevelManager();\n    soundManagerRef.current = new SoundManager();\n\n    // Set initial level\n    setCurrentLevel(initialLevel);\n    return () => {\n      if (soundManagerRef.current) {\n        soundManagerRef.current.cleanup();\n      }\n    };\n  }, [initialLevel, setCurrentLevel]);\n  const drawHUD = useCallback(ctx => {\n    if (!ctx || !canvasRef.current) return;\n    ctx.save();\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '20px Arial';\n\n    // Draw score\n    ctx.textAlign = 'left';\n    ctx.fillText(`Score: ${score}`, 10, 30);\n\n    // Draw level\n    ctx.textAlign = 'center';\n    ctx.fillText(`Level ${currentLevel}`, canvasRef.current.width / 2, 30);\n\n    // Draw lives\n    ctx.textAlign = 'right';\n    ctx.fillText(`Lives: ${lives}`, canvasRef.current.width - 10, 30);\n    ctx.restore();\n  }, [score, lives, currentLevel]);\n  const resetBallAndPaddle = useCallback(() => {\n    if (!gameObjectsRef.current || !canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const paddleY = canvas.height - 40;\n\n    // Reset paddle using its built-in reset method\n    gameObjectsRef.current.paddle.reset();\n\n    // Reset ball\n    gameObjectsRef.current.ball.reset();\n  }, []);\n  const handleBallOut = useCallback(objects => {\n    const newLives = lives - 1;\n    setLives(newLives);\n    if (newLives <= 0) {\n      setIsGameOver(true);\n      setIsVictory(false);\n      handleRestart();\n    } else {\n      resetBallAndPaddle();\n    }\n  }, [lives, setLives, setIsGameOver, setIsVictory, handleRestart, resetBallAndPaddle]);\n  const resetLevelState = useCallback(() => {\n    if (!gameObjectsRef.current) return;\n\n    // Get fresh level data for the current level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n\n    // Create new Brick instances to ensure clean state\n    gameObjectsRef.current.bricks = levelData.bricks.map(brick => {\n      return new Brick(brick.x, brick.y, brick.width, brick.height, brick.type);\n    });\n    resetBallAndPaddle();\n  }, [currentLevel, resetBallAndPaddle]);\n  const drawGameObjects = useCallback(ctx => {\n    if (!ctx || !gameObjectsRef.current) return;\n    const objects = gameObjectsRef.current;\n    ctx.save();\n\n    // Draw bricks\n    objects.bricks.forEach(brick => {\n      if (!brick.isDestroyed()) {\n        brick.draw(ctx);\n      }\n    });\n\n    // Draw paddle and ball\n    objects.paddle.draw(ctx);\n    objects.ball.draw(ctx);\n    ctx.restore();\n  }, []);\n  const handleKeyDown = useCallback(e => {\n    const objects = gameObjectsRef.current;\n    if (!objects) return;\n    switch (e.key.toLowerCase()) {\n      case 'a':\n      case 'arrowleft':\n        if (!isPaused) objects.paddle.moveLeft();\n        break;\n      case 'd':\n      case 'arrowright':\n        if (!isPaused) objects.paddle.moveRight();\n        break;\n      case ' ':\n        if (isGameOver) {\n          handleRestart();\n        } else if (!isPaused && objects.ball && !objects.ball.isLaunched) {\n          objects.ball.launch();\n        }\n        break;\n      case 'escape':\n        setIsPaused(prev => !prev);\n        break;\n      default:\n        break;\n    }\n  }, [isPaused, isGameOver, handleRestart]);\n  const handleKeyUp = useCallback(e => {\n    const objects = gameObjectsRef.current;\n    if (!objects) return;\n    switch (e.key.toLowerCase()) {\n      case 'a':\n      case 'arrowleft':\n        objects.paddle.stopLeft();\n        break;\n      case 'd':\n      case 'arrowright':\n        objects.paddle.stopRight();\n        break;\n      default:\n        break;\n    }\n  }, []);\n  const handleResume = useCallback(() => {\n    setIsPaused(false);\n  }, [setIsPaused]);\n  const handleRestart = useCallback(() => {\n    setIsPaused(false);\n    setIsGameOver(false);\n    setIsVictory(false);\n    setScore(0);\n    setLives(3);\n    setCurrentLevel(1);\n    resetLevelState();\n    if (gameObjectsRef.current) {\n      gameObjectsRef.current.ball.isLaunched = false;\n    }\n  }, [setIsPaused, setIsGameOver, setIsVictory, setScore, setLives, setCurrentLevel, resetLevelState]);\n  const animate = useCallback(timestamp => {\n    var _canvasRef$current;\n    if (isPaused || isGameOver) return;\n    const deltaTime = timestamp - (requestIdRef.current.lastTime || timestamp);\n    requestIdRef.current.lastTime = timestamp;\n    const ctx = (_canvasRef$current = canvasRef.current) === null || _canvasRef$current === void 0 ? void 0 : _canvasRef$current.getContext('2d', {\n      alpha: false\n    });\n    const objects = gameObjectsRef.current;\n    if (!ctx || !objects) return;\n\n    // Clear canvas\n    ctx.fillStyle = '#000000';\n    ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n    // Update game objects\n    if (objects.ball.y + objects.ball.radius > canvasRef.current.height) {\n      handleBallOut();\n    } else {\n      objects.paddle.update(deltaTime / 1000);\n      objects.ball.update(deltaTime / 1000);\n\n      // Handle paddle collision\n      if (objects.ball.checkPaddleCollision(objects.paddle)) {\n        objects.ball.bounceOffPaddle(objects.paddle);\n        if (soundManagerRef.current) {\n          soundManagerRef.current.playPaddleHit();\n        }\n      }\n\n      // Only stick to paddle if not launched\n      if (!objects.ball.isLaunched) {\n        objects.ball.stickToPaddle(objects.paddle);\n      }\n\n      // Check brick collisions\n      let remainingBricks = 0;\n      let brickHit = false;\n      for (const brick of objects.bricks) {\n        if (!brick.isDestroyed()) {\n          remainingBricks++;\n          if (!brickHit && objects.ball.checkBrickCollision(brick)) {\n            objects.ball.bounceOffBrick(brick);\n            brickHit = true;\n            if (brick.hit()) {\n              setScore(prev => prev + 100);\n              if (soundManagerRef.current) {\n                soundManagerRef.current.playBrickHit();\n              }\n            }\n          }\n        }\n      }\n\n      // Check if level is complete\n      if (objects.bricks.length > 0 && remainingBricks === 0) {\n        const nextLevel = currentLevel + 1;\n        if (nextLevel <= levelManagerRef.current.getMaxLevel()) {\n          setCurrentLevel(nextLevel);\n        } else {\n          setIsGameOver(true);\n          setIsVictory(true);\n        }\n      }\n    }\n\n    // Draw game objects\n    drawGameObjects(ctx);\n    drawHUD(ctx);\n\n    // Request next frame\n    requestIdRef.current.id = requestAnimationFrame(animate);\n  }, [drawGameObjects, drawHUD, handleBallOut, currentLevel, isPaused, isGameOver, setCurrentLevel, setIsGameOver, setIsVictory, setScore]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    canvas.width = 800;\n    canvas.height = 600;\n\n    // Initialize game objects\n    gameObjectsRef.current = {\n      paddle: new Paddle(canvas.width / 2 - 50, canvas.height - 40),\n      ball: new Ball(canvas.width / 2, canvas.height - 60),\n      bricks: []\n    };\n\n    // Load initial level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    gameObjectsRef.current.bricks = levelData.bricks.map(brick => new Brick(brick.x, brick.y, brick.width, brick.height, brick.type));\n\n    // Start animation\n    requestIdRef.current.id = requestAnimationFrame(animate);\n\n    // Add event listeners\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      if (requestIdRef.current.id) {\n        cancelAnimationFrame(requestIdRef.current.id);\n      }\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [currentLevel, handleKeyDown, handleKeyUp, animate]);\n  useEffect(() => {\n    if (!gameObjectsRef.current) return;\n\n    // Get fresh level data for the current level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n\n    // Create new Brick instances to ensure clean state\n    gameObjectsRef.current.bricks = levelData.bricks.map(brick => new Brick(brick.x, brick.y, brick.width, brick.height, brick.type));\n    resetBallAndPaddle();\n  }, [currentLevel, resetBallAndPaddle]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"game-canvas\",\n        width: 800,\n        height: 600,\n        tabIndex: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), isPaused && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pause-overlay\",\n        children: /*#__PURE__*/_jsxDEV(PauseMenu, {\n          onResume: handleResume,\n          onRestart: handleRestart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over-overlay\",\n        children: /*#__PURE__*/_jsxDEV(GameOver, {\n          score: score,\n          level: currentLevel,\n          onRestart: handleRestart,\n          isVictory: isVictory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 5\n  }, this);\n};\n_s(GameCanvas, \"z5gEAxm2ZdkfXQG+uxKFacj17aI=\", false, function () {\n  return [useLocation, useGameLoop];\n});\n_c = GameCanvas;\nexport default GameCanvas;\nvar _c;\n$RefreshReg$(_c, \"GameCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","useCallback","useLocation","Ball","Paddle","Brick","useGameLoop","LevelManager","PauseMenu","GameOver","SoundManager","jsxDEV","_jsxDEV","GameCanvas","_s","_location$state","location","canvasRef","gameObjectsRef","requestIdRef","id","lastTime","levelManagerRef","soundManagerRef","initialLevel","state","selectedLevel","isPaused","isGameOver","setScore","score","lives","setLives","currentLevel","setCurrentLevel","setIsPaused","setIsGameOver","setIsVictory","isVictory","resetLevel","current","cleanup","drawHUD","ctx","save","fillStyle","font","textAlign","fillText","width","restore","resetBallAndPaddle","canvas","paddleY","height","paddle","reset","ball","handleBallOut","objects","newLives","handleRestart","resetLevelState","levelData","loadLevel","bricks","map","brick","x","y","type","drawGameObjects","forEach","isDestroyed","draw","handleKeyDown","e","key","toLowerCase","moveLeft","moveRight","isLaunched","launch","prev","handleKeyUp","stopLeft","stopRight","handleResume","animate","timestamp","_canvasRef$current","deltaTime","getContext","alpha","fillRect","radius","update","checkPaddleCollision","bounceOffPaddle","playPaddleHit","stickToPaddle","remainingBricks","brickHit","checkBrickCollision","bounceOffBrick","hit","playBrickHit","length","nextLevel","getMaxLevel","requestAnimationFrame","window","addEventListener","cancelAnimationFrame","removeEventListener","className","children","ref","tabIndex","fileName","_jsxFileName","lineNumber","columnNumber","onResume","onRestart","level","_c","$RefreshReg$"],"sources":["C:/Users/noahm/OneDrive/Desktop/Coding/brick_blaster2/client/src/components/Game/GameCanvas.js"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Ball from './entities/Ball';\nimport Paddle from './entities/Paddle';\nimport Brick from './entities/Brick'; // Import Brick\nimport { useGameLoop } from './GameLoop';\nimport LevelManager from './LevelManager';\nimport PauseMenu from '../UI/PauseMenu';\nimport GameOver from '../UI/GameOver';\nimport SoundManager from '../../utils/SoundManager';\nimport '../../styles/components/GameCanvas.css';\n\nconst GameCanvas = () => {\n  const location = useLocation();\n  const canvasRef = useRef(null);\n  const gameObjectsRef = useRef(null);\n  const requestIdRef = useRef({ id: null, lastTime: null });\n  const levelManagerRef = useRef(new LevelManager());\n  const soundManagerRef = useRef(null);\n\n  // Get the selected level from navigation state, default to 1\n  const initialLevel = location.state?.selectedLevel || 1;\n\n  const {\n    isPaused,\n    isGameOver,\n    setScore,\n    score,\n    lives,\n    setLives,\n    currentLevel,\n    setCurrentLevel,\n    setIsPaused,\n    setIsGameOver,\n    setIsVictory,\n    isVictory,\n    resetLevel\n  } = useGameLoop(initialLevel);\n\n  // Initialize level manager and sound manager\n  useEffect(() => {\n    levelManagerRef.current = new LevelManager();\n    soundManagerRef.current = new SoundManager();\n    \n    // Set initial level\n    setCurrentLevel(initialLevel);\n    \n    return () => {\n      if (soundManagerRef.current) {\n        soundManagerRef.current.cleanup();\n      }\n    };\n  }, [initialLevel, setCurrentLevel]);\n\n  const drawHUD = useCallback((ctx) => {\n    if (!ctx || !canvasRef.current) return;\n    \n    ctx.save();\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '20px Arial';\n    \n    // Draw score\n    ctx.textAlign = 'left';\n    ctx.fillText(`Score: ${score}`, 10, 30);\n    \n    // Draw level\n    ctx.textAlign = 'center';\n    ctx.fillText(`Level ${currentLevel}`, canvasRef.current.width / 2, 30);\n    \n    // Draw lives\n    ctx.textAlign = 'right';\n    ctx.fillText(`Lives: ${lives}`, canvasRef.current.width - 10, 30);\n    ctx.restore();\n  }, [score, lives, currentLevel]);\n\n  const resetBallAndPaddle = useCallback(() => {\n    if (!gameObjectsRef.current || !canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const paddleY = canvas.height - 40;\n    \n    // Reset paddle using its built-in reset method\n    gameObjectsRef.current.paddle.reset();\n    \n    // Reset ball\n    gameObjectsRef.current.ball.reset();\n  }, []);\n\n  const handleBallOut = useCallback((objects) => {\n    const newLives = lives - 1;\n    setLives(newLives);\n    \n    if (newLives <= 0) {\n      setIsGameOver(true);\n      setIsVictory(false);\n      handleRestart();\n    } else {\n      resetBallAndPaddle();\n    }\n  }, [lives, setLives, setIsGameOver, setIsVictory, handleRestart, resetBallAndPaddle]);\n\n  const resetLevelState = useCallback(() => {\n    if (!gameObjectsRef.current) return;\n\n    // Get fresh level data for the current level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    \n    // Create new Brick instances to ensure clean state\n    gameObjectsRef.current.bricks = levelData.bricks.map(brick => {\n      return new Brick(brick.x, brick.y, brick.width, brick.height, brick.type);\n    });\n\n    resetBallAndPaddle();\n  }, [currentLevel, resetBallAndPaddle]);\n\n  const drawGameObjects = useCallback((ctx) => {\n    if (!ctx || !gameObjectsRef.current) return;\n    \n    const objects = gameObjectsRef.current;\n    ctx.save();\n\n    // Draw bricks\n    objects.bricks.forEach(brick => {\n      if (!brick.isDestroyed()) {\n        brick.draw(ctx);\n      }\n    });\n\n    // Draw paddle and ball\n    objects.paddle.draw(ctx);\n    objects.ball.draw(ctx);\n\n    ctx.restore();\n  }, []);\n\n  const handleKeyDown = useCallback((e) => {\n    const objects = gameObjectsRef.current;\n    if (!objects) return;\n\n    switch (e.key.toLowerCase()) {\n      case 'a':\n      case 'arrowleft':\n        if (!isPaused) objects.paddle.moveLeft();\n        break;\n      case 'd':\n      case 'arrowright':\n        if (!isPaused) objects.paddle.moveRight();\n        break;\n      case ' ':\n        if (isGameOver) {\n          handleRestart();\n        } else if (!isPaused && objects.ball && !objects.ball.isLaunched) {\n          objects.ball.launch();\n        }\n        break;\n      case 'escape':\n        setIsPaused(prev => !prev);\n        break;\n      default:\n        break;\n    }\n  }, [isPaused, isGameOver, handleRestart]);\n\n  const handleKeyUp = useCallback((e) => {\n    const objects = gameObjectsRef.current;\n    if (!objects) return;\n\n    switch (e.key.toLowerCase()) {\n      case 'a':\n      case 'arrowleft':\n        objects.paddle.stopLeft();\n        break;\n      case 'd':\n      case 'arrowright':\n        objects.paddle.stopRight();\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  const handleResume = useCallback(() => {\n    setIsPaused(false);\n  }, [setIsPaused]);\n\n  const handleRestart = useCallback(() => {\n    setIsPaused(false);\n    setIsGameOver(false);\n    setIsVictory(false);\n    setScore(0);\n    setLives(3);\n    setCurrentLevel(1);\n    resetLevelState();\n    \n    if (gameObjectsRef.current) {\n      gameObjectsRef.current.ball.isLaunched = false;\n    }\n  }, [setIsPaused, setIsGameOver, setIsVictory, setScore, setLives, setCurrentLevel, resetLevelState]);\n\n  const animate = useCallback((timestamp) => {\n    if (isPaused || isGameOver) return;\n\n    const deltaTime = timestamp - (requestIdRef.current.lastTime || timestamp);\n    requestIdRef.current.lastTime = timestamp;\n\n    const ctx = canvasRef.current?.getContext('2d', { alpha: false });\n    const objects = gameObjectsRef.current;\n\n    if (!ctx || !objects) return;\n\n    // Clear canvas\n    ctx.fillStyle = '#000000';\n    ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n    // Update game objects\n    if (objects.ball.y + objects.ball.radius > canvasRef.current.height) {\n      handleBallOut();\n    } else {\n      objects.paddle.update(deltaTime / 1000);\n      objects.ball.update(deltaTime / 1000);\n\n      // Handle paddle collision\n      if (objects.ball.checkPaddleCollision(objects.paddle)) {\n        objects.ball.bounceOffPaddle(objects.paddle);\n        if (soundManagerRef.current) {\n          soundManagerRef.current.playPaddleHit();\n        }\n      }\n\n      // Only stick to paddle if not launched\n      if (!objects.ball.isLaunched) {\n        objects.ball.stickToPaddle(objects.paddle);\n      }\n\n      // Check brick collisions\n      let remainingBricks = 0;\n      let brickHit = false;\n\n      for (const brick of objects.bricks) {\n        if (!brick.isDestroyed()) {\n          remainingBricks++;\n          if (!brickHit && objects.ball.checkBrickCollision(brick)) {\n            objects.ball.bounceOffBrick(brick);\n            brickHit = true;\n            if (brick.hit()) {\n              setScore(prev => prev + 100);\n              if (soundManagerRef.current) {\n                soundManagerRef.current.playBrickHit();\n              }\n            }\n          }\n        }\n      }\n\n      // Check if level is complete\n      if (objects.bricks.length > 0 && remainingBricks === 0) {\n        const nextLevel = currentLevel + 1;\n        if (nextLevel <= levelManagerRef.current.getMaxLevel()) {\n          setCurrentLevel(nextLevel);\n        } else {\n          setIsGameOver(true);\n          setIsVictory(true);\n        }\n      }\n    }\n\n    // Draw game objects\n    drawGameObjects(ctx);\n    drawHUD(ctx);\n\n    // Request next frame\n    requestIdRef.current.id = requestAnimationFrame(animate);\n  }, [drawGameObjects, drawHUD, handleBallOut, currentLevel, isPaused, isGameOver, \n      setCurrentLevel, setIsGameOver, setIsVictory, setScore]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    canvas.width = 800;\n    canvas.height = 600;\n\n    // Initialize game objects\n    gameObjectsRef.current = {\n      paddle: new Paddle(canvas.width / 2 - 50, canvas.height - 40),\n      ball: new Ball(canvas.width / 2, canvas.height - 60),\n      bricks: []\n    };\n\n    // Load initial level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    gameObjectsRef.current.bricks = levelData.bricks.map(brick => \n      new Brick(brick.x, brick.y, brick.width, brick.height, brick.type)\n    );\n\n    // Start animation\n    requestIdRef.current.id = requestAnimationFrame(animate);\n\n    // Add event listeners\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      if (requestIdRef.current.id) {\n        cancelAnimationFrame(requestIdRef.current.id);\n      }\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [currentLevel, handleKeyDown, handleKeyUp, animate]);\n\n  useEffect(() => {\n    if (!gameObjectsRef.current) return;\n    \n    // Get fresh level data for the current level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    \n    // Create new Brick instances to ensure clean state\n    gameObjectsRef.current.bricks = levelData.bricks.map(brick => \n      new Brick(brick.x, brick.y, brick.width, brick.height, brick.type)\n    );\n    \n    resetBallAndPaddle();\n  }, [currentLevel, resetBallAndPaddle]);\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"canvas-wrapper\">\n        <canvas\n          ref={canvasRef}\n          className=\"game-canvas\"\n          width={800}\n          height={600}\n          tabIndex={0}\n        />\n        {isPaused && (\n          <div className=\"pause-overlay\">\n            <PauseMenu\n              onResume={handleResume}\n              onRestart={handleRestart}\n            />\n          </div>\n        )}\n        {isGameOver && (\n          <div className=\"game-over-overlay\">\n            <GameOver\n              score={score}\n              level={currentLevel}\n              onRestart={handleRestart}\n              isVictory={isVictory}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GameCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}