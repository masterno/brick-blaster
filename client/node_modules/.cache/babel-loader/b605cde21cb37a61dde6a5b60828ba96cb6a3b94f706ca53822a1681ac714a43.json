{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noahm\\\\OneDrive\\\\Desktop\\\\Coding\\\\brick_blaster2\\\\client\\\\src\\\\components\\\\Game\\\\GameCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Ball from './entities/Ball';\nimport Paddle from './entities/Paddle';\nimport PauseMenu from '../UI/PauseMenu';\nimport GameOver from '../UI/GameOver';\nimport LevelManager from './LevelManager';\nimport '../../styles/components/GameCanvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameCanvas = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const gameObjectsRef = useRef(null);\n  const requestIdRef = useRef(null);\n  const scoreRef = useRef(0);\n  const [score, setScore] = useState(0);\n  const [lives, setLives] = useState(3);\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const [isPaused, setIsPaused] = useState(false);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isVictory, setIsVictory] = useState(false);\n\n  // Create levelManager ref to avoid dependency issues\n  const levelManagerRef = useRef(new LevelManager());\n  useEffect(() => {\n    setScore(scoreRef.current);\n  }, [scoreRef.current]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    // Set canvas size\n    canvas.width = 800;\n    canvas.height = 600;\n    const ctx = canvas.getContext('2d');\n\n    // Initialize game objects if not already initialized\n    if (!gameObjectsRef.current) {\n      gameObjectsRef.current = {\n        ball: new Ball(canvas.width / 2, canvas.height - 30),\n        paddle: new Paddle(canvas.width / 2 - 50, canvas.height - 20),\n        bricks: levelManagerRef.current.loadLevel(currentLevel).bricks\n      };\n    }\n    let lastTime = 0;\n\n    // Handle keyboard input\n    const handleKeyDown = e => {\n      var _gameObjectsRef$curre, _gameObjectsRef$curre2, _gameObjectsRef$curre3;\n      console.log('KeyDown:', e.key); // Debug log\n      if (!isPaused && !isGameOver) {\n        switch (e.key.toLowerCase()) {\n          case 'a':\n          case 'arrowleft':\n            console.log('Moving left'); // Debug log\n            if ((_gameObjectsRef$curre = gameObjectsRef.current) !== null && _gameObjectsRef$curre !== void 0 && _gameObjectsRef$curre.paddle) {\n              gameObjectsRef.current.paddle.moveLeft();\n            }\n            break;\n          case 'd':\n          case 'arrowright':\n            console.log('Moving right'); // Debug log\n            if ((_gameObjectsRef$curre2 = gameObjectsRef.current) !== null && _gameObjectsRef$curre2 !== void 0 && _gameObjectsRef$curre2.paddle) {\n              gameObjectsRef.current.paddle.moveRight();\n            }\n            break;\n          case ' ':\n            console.log('Launch ball'); // Debug log\n            if ((_gameObjectsRef$curre3 = gameObjectsRef.current) !== null && _gameObjectsRef$curre3 !== void 0 && _gameObjectsRef$curre3.ball && !gameObjectsRef.current.ball.isLaunched) {\n              gameObjectsRef.current.ball.launch();\n            }\n            break;\n          case 'escape':\n            setIsPaused(prev => !prev);\n            break;\n          default:\n            break;\n        }\n      }\n    };\n    const handleKeyUp = e => {\n      var _gameObjectsRef$curre4, _gameObjectsRef$curre5;\n      console.log('KeyUp:', e.key); // Debug log\n      if (!isPaused && !isGameOver) {\n        switch (e.key.toLowerCase()) {\n          case 'a':\n          case 'arrowleft':\n            console.log('Stop left'); // Debug log\n            if ((_gameObjectsRef$curre4 = gameObjectsRef.current) !== null && _gameObjectsRef$curre4 !== void 0 && _gameObjectsRef$curre4.paddle) {\n              gameObjectsRef.current.paddle.stopLeft();\n            }\n            break;\n          case 'd':\n          case 'arrowright':\n            console.log('Stop right'); // Debug log\n            if ((_gameObjectsRef$curre5 = gameObjectsRef.current) !== null && _gameObjectsRef$curre5 !== void 0 && _gameObjectsRef$curre5.paddle) {\n              gameObjectsRef.current.paddle.stopRight();\n            }\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    // Store canvas reference for cleanup\n    const currentCanvas = canvasRef.current;\n    currentCanvas.tabIndex = 0; // Make canvas focusable\n    currentCanvas.focus(); // Focus the canvas\n    currentCanvas.addEventListener('keydown', handleKeyDown);\n    currentCanvas.addEventListener('keyup', handleKeyUp);\n\n    // Game loop function\n    const gameLoop = timestamp => {\n      if (!lastTime) {\n        lastTime = timestamp;\n        requestIdRef.current = requestAnimationFrame(gameLoop);\n        return;\n      }\n      const deltaTime = (timestamp - lastTime) / 1000; // Convert to seconds\n      lastTime = timestamp;\n      if (!isPaused && !isGameOver) {\n        const objects = gameObjectsRef.current;\n\n        // Clear canvas\n        ctx.fillStyle = '#000000';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        // Update game objects with deltaTime\n        objects.paddle.update(deltaTime);\n\n        // Make ball stick to paddle if not launched\n        if (!objects.ball.isLaunched) {\n          objects.ball.stickToPaddle(objects.paddle);\n        } else {\n          objects.ball.update(deltaTime);\n        }\n\n        // Draw game objects in correct order\n        // 1. Draw bricks\n        objects.bricks.forEach(brick => {\n          if (!brick.isDestroyed()) {\n            brick.draw(ctx);\n          }\n        });\n\n        // 2. Draw ball\n        objects.ball.draw(ctx);\n\n        // 3. Draw paddle\n        objects.paddle.draw(ctx);\n\n        // Draw debug info\n        ctx.font = '12px Courier New';\n        ctx.fillStyle = '#00FF00';\n        ctx.textAlign = 'left';\n        ctx.fillText(`Ball: x=${Math.round(objects.ball.x)}, y=${Math.round(objects.ball.y)}, launched=${objects.ball.isLaunched}`, 10, canvas.height - 60);\n        ctx.fillText(`Paddle: x=${Math.round(objects.paddle.x)}, y=${Math.round(objects.paddle.y)}, left=${objects.paddle.leftPressed}, right=${objects.paddle.rightPressed}`, 10, canvas.height - 40);\n\n        // Draw HUD\n        ctx.font = '16px Courier New';\n        ctx.fillStyle = '#00FF00';\n\n        // Score on the left\n        ctx.textAlign = 'left';\n        ctx.fillText(`Score: ${score}`, 10, 40);\n\n        // Level in the center\n        ctx.textAlign = 'center';\n        ctx.fillText(`Level: ${currentLevel}`, canvas.width / 2, 40);\n\n        // Lives on the right\n        ctx.textAlign = 'right';\n        ctx.fillText(`Lives: ${lives}`, canvas.width - 10, 40);\n\n        // Check for ball-paddle collision\n        if (objects.ball.checkPaddleCollision(objects.paddle)) {\n          objects.ball.bounceOffPaddle(objects.paddle);\n        }\n\n        // Check for ball-brick collisions\n        objects.bricks.forEach((brick, index) => {\n          if (!brick.isDestroyed() && objects.ball.checkBrickCollision(brick)) {\n            objects.ball.bounceOffBrick();\n            if (brick.hit()) {\n              scoreRef.current += 100;\n              setScore(scoreRef.current);\n            }\n          }\n        });\n\n        // Check if ball is lost\n        if (objects.ball.y + objects.ball.radius > canvas.height) {\n          setLives(prev => prev - 1);\n          if (lives > 1) {\n            objects.ball.reset();\n          } else {\n            setIsGameOver(true);\n          }\n        }\n\n        // Check if level is complete\n        if (objects.bricks.every(brick => brick.isDestroyed())) {\n          if (currentLevel < levelManagerRef.current.getMaxLevel()) {\n            setCurrentLevel(prev => prev + 1);\n            objects.ball.reset();\n            objects.paddle.reset();\n            objects.bricks = levelManagerRef.current.loadLevel(currentLevel + 1).bricks;\n          } else {\n            setIsVictory(true);\n            setIsGameOver(true);\n          }\n        }\n      }\n\n      // Request next frame\n      requestIdRef.current = requestAnimationFrame(gameLoop);\n    };\n\n    // Start game loop\n    requestIdRef.current = requestAnimationFrame(gameLoop);\n\n    // Cleanup\n    return () => {\n      if (requestIdRef.current) {\n        cancelAnimationFrame(requestIdRef.current);\n      }\n      if (currentCanvas) {\n        currentCanvas.removeEventListener('keydown', handleKeyDown);\n        currentCanvas.removeEventListener('keyup', handleKeyUp);\n      }\n    };\n  }, [isPaused, isGameOver, lives, currentLevel]); // Only re-run effect when game state changes\n\n  const handleRestart = () => {\n    if (gameObjectsRef.current) {\n      gameObjectsRef.current.ball.reset();\n      gameObjectsRef.current.paddle.reset();\n      gameObjectsRef.current.bricks = levelManagerRef.current.loadLevel(1).bricks;\n      scoreRef.current = 0;\n      setScore(0);\n      setLives(3);\n      setCurrentLevel(1);\n      setIsGameOver(false);\n      setIsVictory(false);\n      setIsPaused(false);\n    }\n  };\n  const navigate = useNavigate();\n  const handleMainMenu = () => {\n    if (requestIdRef.current) {\n      cancelAnimationFrame(requestIdRef.current);\n    }\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: \"game-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), isPaused && !isGameOver && /*#__PURE__*/_jsxDEV(PauseMenu, {\n      onResume: () => setIsPaused(false),\n      onRestart: handleRestart,\n      onMainMenu: handleMainMenu\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(GameOver, {\n      score: score,\n      level: currentLevel,\n      isVictory: isVictory,\n      onRestart: handleRestart,\n      onMainMenu: handleMainMenu\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n};\n_s(GameCanvas, \"MYHbRYfx9z65A4+tOlx1yDoZFSQ=\", false, function () {\n  return [useNavigate];\n});\n_c = GameCanvas;\nexport default GameCanvas;\nvar _c;\n$RefreshReg$(_c, \"GameCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useNavigate","Ball","Paddle","PauseMenu","GameOver","LevelManager","jsxDEV","_jsxDEV","GameCanvas","_s","canvasRef","gameObjectsRef","requestIdRef","scoreRef","score","setScore","lives","setLives","currentLevel","setCurrentLevel","isPaused","setIsPaused","isGameOver","setIsGameOver","isVictory","setIsVictory","levelManagerRef","current","canvas","width","height","ctx","getContext","ball","paddle","bricks","loadLevel","lastTime","handleKeyDown","e","_gameObjectsRef$curre","_gameObjectsRef$curre2","_gameObjectsRef$curre3","console","log","key","toLowerCase","moveLeft","moveRight","isLaunched","launch","prev","handleKeyUp","_gameObjectsRef$curre4","_gameObjectsRef$curre5","stopLeft","stopRight","currentCanvas","tabIndex","focus","addEventListener","gameLoop","timestamp","requestAnimationFrame","deltaTime","objects","fillStyle","fillRect","update","stickToPaddle","forEach","brick","isDestroyed","draw","font","textAlign","fillText","Math","round","x","y","leftPressed","rightPressed","checkPaddleCollision","bounceOffPaddle","index","checkBrickCollision","bounceOffBrick","hit","radius","reset","every","getMaxLevel","cancelAnimationFrame","removeEventListener","handleRestart","navigate","handleMainMenu","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onResume","onRestart","onMainMenu","level","_c","$RefreshReg$"],"sources":["C:/Users/noahm/OneDrive/Desktop/Coding/brick_blaster2/client/src/components/Game/GameCanvas.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Ball from './entities/Ball';\nimport Paddle from './entities/Paddle';\nimport PauseMenu from '../UI/PauseMenu';\nimport GameOver from '../UI/GameOver';\nimport LevelManager from './LevelManager';\nimport '../../styles/components/GameCanvas.css';\n\nconst GameCanvas = () => {\n  const canvasRef = useRef(null);\n  const gameObjectsRef = useRef(null);\n  const requestIdRef = useRef(null);\n  const scoreRef = useRef(0);\n  const [score, setScore] = useState(0);\n  const [lives, setLives] = useState(3);\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const [isPaused, setIsPaused] = useState(false);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isVictory, setIsVictory] = useState(false);\n  \n  // Create levelManager ref to avoid dependency issues\n  const levelManagerRef = useRef(new LevelManager());\n\n  useEffect(() => {\n    setScore(scoreRef.current);\n  }, [scoreRef.current]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    // Set canvas size\n    canvas.width = 800;\n    canvas.height = 600;\n    const ctx = canvas.getContext('2d');\n    \n    // Initialize game objects if not already initialized\n    if (!gameObjectsRef.current) {\n      gameObjectsRef.current = {\n        ball: new Ball(canvas.width / 2, canvas.height - 30),\n        paddle: new Paddle(canvas.width / 2 - 50, canvas.height - 20),\n        bricks: levelManagerRef.current.loadLevel(currentLevel).bricks\n      };\n    }\n\n    let lastTime = 0;\n\n    // Handle keyboard input\n    const handleKeyDown = (e) => {\n      console.log('KeyDown:', e.key); // Debug log\n      if (!isPaused && !isGameOver) {\n        switch (e.key.toLowerCase()) {\n          case 'a':\n          case 'arrowleft':\n            console.log('Moving left'); // Debug log\n            if (gameObjectsRef.current?.paddle) {\n              gameObjectsRef.current.paddle.moveLeft();\n            }\n            break;\n          case 'd':\n          case 'arrowright':\n            console.log('Moving right'); // Debug log\n            if (gameObjectsRef.current?.paddle) {\n              gameObjectsRef.current.paddle.moveRight();\n            }\n            break;\n          case ' ':\n            console.log('Launch ball'); // Debug log\n            if (gameObjectsRef.current?.ball && !gameObjectsRef.current.ball.isLaunched) {\n              gameObjectsRef.current.ball.launch();\n            }\n            break;\n          case 'escape':\n            setIsPaused(prev => !prev);\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    const handleKeyUp = (e) => {\n      console.log('KeyUp:', e.key); // Debug log\n      if (!isPaused && !isGameOver) {\n        switch (e.key.toLowerCase()) {\n          case 'a':\n          case 'arrowleft':\n            console.log('Stop left'); // Debug log\n            if (gameObjectsRef.current?.paddle) {\n              gameObjectsRef.current.paddle.stopLeft();\n            }\n            break;\n          case 'd':\n          case 'arrowright':\n            console.log('Stop right'); // Debug log\n            if (gameObjectsRef.current?.paddle) {\n              gameObjectsRef.current.paddle.stopRight();\n            }\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    // Store canvas reference for cleanup\n    const currentCanvas = canvasRef.current;\n    currentCanvas.tabIndex = 0; // Make canvas focusable\n    currentCanvas.focus(); // Focus the canvas\n    currentCanvas.addEventListener('keydown', handleKeyDown);\n    currentCanvas.addEventListener('keyup', handleKeyUp);\n\n    // Game loop function\n    const gameLoop = (timestamp) => {\n      if (!lastTime) {\n        lastTime = timestamp;\n        requestIdRef.current = requestAnimationFrame(gameLoop);\n        return;\n      }\n      \n      const deltaTime = (timestamp - lastTime) / 1000; // Convert to seconds\n      lastTime = timestamp;\n\n      if (!isPaused && !isGameOver) {\n        const objects = gameObjectsRef.current;\n        \n        // Clear canvas\n        ctx.fillStyle = '#000000';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        // Update game objects with deltaTime\n        objects.paddle.update(deltaTime);\n        \n        // Make ball stick to paddle if not launched\n        if (!objects.ball.isLaunched) {\n          objects.ball.stickToPaddle(objects.paddle);\n        } else {\n          objects.ball.update(deltaTime);\n        }\n\n        // Draw game objects in correct order\n        // 1. Draw bricks\n        objects.bricks.forEach(brick => {\n          if (!brick.isDestroyed()) {\n            brick.draw(ctx);\n          }\n        });\n\n        // 2. Draw ball\n        objects.ball.draw(ctx);\n\n        // 3. Draw paddle\n        objects.paddle.draw(ctx);\n\n        // Draw debug info\n        ctx.font = '12px Courier New';\n        ctx.fillStyle = '#00FF00';\n        ctx.textAlign = 'left';\n        ctx.fillText(`Ball: x=${Math.round(objects.ball.x)}, y=${Math.round(objects.ball.y)}, launched=${objects.ball.isLaunched}`, 10, canvas.height - 60);\n        ctx.fillText(`Paddle: x=${Math.round(objects.paddle.x)}, y=${Math.round(objects.paddle.y)}, left=${objects.paddle.leftPressed}, right=${objects.paddle.rightPressed}`, 10, canvas.height - 40);\n\n        // Draw HUD\n        ctx.font = '16px Courier New';\n        ctx.fillStyle = '#00FF00';\n        \n        // Score on the left\n        ctx.textAlign = 'left';\n        ctx.fillText(`Score: ${score}`, 10, 40);\n        \n        // Level in the center\n        ctx.textAlign = 'center';\n        ctx.fillText(`Level: ${currentLevel}`, canvas.width / 2, 40);\n        \n        // Lives on the right\n        ctx.textAlign = 'right';\n        ctx.fillText(`Lives: ${lives}`, canvas.width - 10, 40);\n\n        // Check for ball-paddle collision\n        if (objects.ball.checkPaddleCollision(objects.paddle)) {\n          objects.ball.bounceOffPaddle(objects.paddle);\n        }\n\n        // Check for ball-brick collisions\n        objects.bricks.forEach((brick, index) => {\n          if (!brick.isDestroyed() && objects.ball.checkBrickCollision(brick)) {\n            objects.ball.bounceOffBrick();\n            if (brick.hit()) {\n              scoreRef.current += 100;\n              setScore(scoreRef.current);\n            }\n          }\n        });\n\n        // Check if ball is lost\n        if (objects.ball.y + objects.ball.radius > canvas.height) {\n          setLives(prev => prev - 1);\n          if (lives > 1) {\n            objects.ball.reset();\n          } else {\n            setIsGameOver(true);\n          }\n        }\n\n        // Check if level is complete\n        if (objects.bricks.every(brick => brick.isDestroyed())) {\n          if (currentLevel < levelManagerRef.current.getMaxLevel()) {\n            setCurrentLevel(prev => prev + 1);\n            objects.ball.reset();\n            objects.paddle.reset();\n            objects.bricks = levelManagerRef.current.loadLevel(currentLevel + 1).bricks;\n          } else {\n            setIsVictory(true);\n            setIsGameOver(true);\n          }\n        }\n      }\n      \n      // Request next frame\n      requestIdRef.current = requestAnimationFrame(gameLoop);\n    };\n\n    // Start game loop\n    requestIdRef.current = requestAnimationFrame(gameLoop);\n\n    // Cleanup\n    return () => {\n      if (requestIdRef.current) {\n        cancelAnimationFrame(requestIdRef.current);\n      }\n      if (currentCanvas) {\n        currentCanvas.removeEventListener('keydown', handleKeyDown);\n        currentCanvas.removeEventListener('keyup', handleKeyUp);\n      }\n    };\n  }, [isPaused, isGameOver, lives, currentLevel]); // Only re-run effect when game state changes\n\n  const handleRestart = () => {\n    if (gameObjectsRef.current) {\n      gameObjectsRef.current.ball.reset();\n      gameObjectsRef.current.paddle.reset();\n      gameObjectsRef.current.bricks = levelManagerRef.current.loadLevel(1).bricks;\n      scoreRef.current = 0;\n      setScore(0);\n      setLives(3);\n      setCurrentLevel(1);\n      setIsGameOver(false);\n      setIsVictory(false);\n      setIsPaused(false);\n    }\n  };\n\n  const navigate = useNavigate();\n  const handleMainMenu = () => {\n    if (requestIdRef.current) {\n      cancelAnimationFrame(requestIdRef.current);\n    }\n    navigate('/');\n  };\n\n  return (\n    <div className=\"game-container\">\n      <canvas\n        ref={canvasRef}\n        className=\"game-canvas\"\n      />\n      \n      {isPaused && !isGameOver && (\n        <PauseMenu\n          onResume={() => setIsPaused(false)}\n          onRestart={handleRestart}\n          onMainMenu={handleMainMenu}\n        />\n      )}\n      \n      {isGameOver && (\n        <GameOver\n          score={score}\n          level={currentLevel}\n          isVictory={isVictory}\n          onRestart={handleRestart}\n          onMainMenu={handleMainMenu}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default GameCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}