{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noahm\\\\OneDrive\\\\Desktop\\\\Coding\\\\brick_blaster2\\\\client\\\\src\\\\components\\\\Game\\\\GameCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Ball from './entities/Ball';\nimport Paddle from './entities/Paddle';\nimport Brick from './entities/Brick'; // Import Brick\nimport { useGameLoop } from './GameLoop';\nimport LevelManager from './LevelManager';\nimport PauseMenu from '../UI/PauseMenu';\nimport GameOver from '../UI/GameOver';\nimport SoundManager from '../../utils/SoundManager';\nimport '../../styles/components/GameCanvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameCanvas = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const canvasRef = useRef(null);\n  const gameObjectsRef = useRef(null);\n  const requestIdRef = useRef({\n    id: null,\n    lastTime: null\n  });\n  const levelManagerRef = useRef(new LevelManager());\n  const soundManagerRef = useRef(new SoundManager());\n\n  // Get the selected level from navigation state, default to 1\n  const initialLevel = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.selectedLevel) || 1;\n  const {\n    isPaused,\n    isGameOver,\n    setScore,\n    score,\n    lives,\n    setLives,\n    currentLevel,\n    setCurrentLevel,\n    setIsPaused,\n    setIsGameOver,\n    setIsVictory,\n    isVictory,\n    resetLevel\n  } = useGameLoop(initialLevel);\n\n  // Initialize level manager and sound manager\n  useEffect(() => {\n    levelManagerRef.current = new LevelManager();\n    soundManagerRef.current = new SoundManager();\n\n    // Set initial level\n    setCurrentLevel(initialLevel);\n    return () => {\n      soundManagerRef.current.cleanup();\n    };\n  }, [initialLevel, setCurrentLevel]);\n  const drawHUD = useCallback(ctx => {\n    ctx.save();\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '20px Arial';\n\n    // Draw score\n    ctx.textAlign = 'left';\n    ctx.fillText(`Score: ${score}`, 10, 30);\n\n    // Draw level\n    ctx.textAlign = 'center';\n    ctx.fillText(`Level ${currentLevel}`, canvasRef.current.width / 2, 30);\n\n    // Draw lives\n    ctx.textAlign = 'right';\n    ctx.fillText(`Lives: ${lives}`, canvasRef.current.width - 10, 30);\n    ctx.restore();\n  }, [score, lives, currentLevel]);\n  const resetBallAndPaddle = useCallback(() => {\n    if (!gameObjectsRef.current || !canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const paddleY = canvas.height - 40;\n    const paddleWidth = 100;\n\n    // Reset paddle\n    const paddle = gameObjectsRef.current.paddle;\n    paddle.x = canvas.width / 2 - paddleWidth / 2;\n    paddle.y = paddleY;\n    paddle.dx = 0;\n    paddle.leftPressed = false;\n    paddle.rightPressed = false;\n\n    // Reset ball\n    const ball = gameObjectsRef.current.ball;\n    ball.x = canvas.width / 2;\n    ball.y = paddleY - ball.radius;\n    ball.dx = 0;\n    ball.dy = 0;\n    ball.isLaunched = false;\n  }, []);\n  const handleBallOut = useCallback(objects => {\n    const newLives = lives - 1;\n    setLives(newLives);\n    if (newLives <= 0) {\n      setIsGameOver(true);\n      setIsVictory(false);\n      resetLevel();\n    } else {\n      resetBallAndPaddle();\n    }\n  }, [lives, setLives, setIsGameOver, setIsVictory, resetLevel, resetBallAndPaddle]);\n  const resetLevelState = useCallback(() => {\n    if (!gameObjectsRef.current) return;\n\n    // Get fresh level data for the current level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n\n    // Create new Brick instances to ensure clean state\n    gameObjectsRef.current.bricks = levelData.bricks.map(brick => {\n      return new Brick(brick.x, brick.y, brick.width, brick.height, brick.type);\n    });\n  }, [currentLevel]);\n  const drawGameObjects = useCallback((ctx, objects) => {\n    if (!ctx || !objects) return;\n    ctx.save();\n    objects.bricks.forEach(brick => {\n      if (!brick.isDestroyed()) {\n        brick.draw(ctx);\n      }\n    });\n    objects.ball.draw(ctx);\n    objects.paddle.draw(ctx);\n    ctx.restore();\n  }, []);\n  const handleKeyDown = useCallback(e => {\n    if (isGameOver) return;\n    const objects = gameObjectsRef.current;\n    switch (e.key.toLowerCase()) {\n      case 'a':\n      case 'arrowleft':\n        if (!isPaused) objects.paddle.moveLeft();\n        break;\n      case 'd':\n      case 'arrowright':\n        if (!isPaused) objects.paddle.moveRight();\n        break;\n      case ' ':\n        if (!isPaused && objects.ball) objects.ball.launch();\n        break;\n      case 'escape':\n        setIsPaused(prev => !prev);\n        break;\n      default:\n        break;\n    }\n  }, [isPaused, isGameOver, setIsPaused]);\n  const handleKeyUp = useCallback(e => {\n    if (isGameOver || isPaused) return;\n    const objects = gameObjectsRef.current;\n    switch (e.key.toLowerCase()) {\n      case 'a':\n      case 'arrowleft':\n        objects.paddle.stopLeft();\n        break;\n      case 'd':\n      case 'arrowright':\n        objects.paddle.stopRight();\n        break;\n      default:\n        break;\n    }\n  }, [isPaused, isGameOver]);\n  const handleResume = useCallback(() => {\n    setIsPaused(false);\n  }, [setIsPaused]);\n  const handleRestart = useCallback(() => {\n    // Reset game state\n    setIsPaused(false);\n    setIsGameOver(false);\n    setIsVictory(false);\n    setScore(0);\n    setLives(3);\n    setCurrentLevel(1);\n\n    // Reset level manager to ensure fresh state\n    levelManagerRef.current = new LevelManager();\n\n    // Reset game objects and level\n    resetLevelState();\n    resetBallAndPaddle();\n\n    // Ensure ball is not launched\n    if (gameObjectsRef.current) {\n      gameObjectsRef.current.ball.isLaunched = false;\n    }\n  }, [setIsPaused, setIsGameOver, setIsVictory, setScore, setLives, setCurrentLevel, resetLevelState, resetBallAndPaddle]);\n  useEffect(() => {\n    if (!gameObjectsRef.current) return;\n    console.log('Level changed to:', currentLevel);\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    gameObjectsRef.current.bricks = levelData.bricks.map(brick => new Brick(brick.x, brick.y, brick.width, brick.height, brick.type));\n    resetBallAndPaddle();\n  }, [currentLevel, resetBallAndPaddle]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    canvas.width = 800;\n    canvas.height = 600;\n\n    // Initialize game objects\n    const paddleY = canvas.height - 40;\n    const paddleWidth = 100;\n    gameObjectsRef.current = {\n      paddle: new Paddle(canvas.width / 2 - paddleWidth / 2, paddleY),\n      ball: new Ball(canvas.width / 2, paddleY - 10),\n      bricks: []\n    };\n\n    // Load initial level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    gameObjectsRef.current.bricks = levelData.bricks;\n\n    // Store animation ID in a variable that will be captured in the cleanup\n    const requestId = requestIdRef.current;\n    const animate = timestamp => {\n      var _canvasRef$current;\n      const ctx = (_canvasRef$current = canvasRef.current) === null || _canvasRef$current === void 0 ? void 0 : _canvasRef$current.getContext('2d', {\n        alpha: false\n      });\n      const objects = gameObjectsRef.current;\n      if (!ctx || !objects) {\n        requestId.id = requestAnimationFrame(animate);\n        return;\n      }\n      if (!requestId.lastTime) {\n        requestId.lastTime = timestamp;\n        requestId.id = requestAnimationFrame(animate);\n        return;\n      }\n      const deltaTime = Math.min((timestamp - requestId.lastTime) / 1000, 0.032);\n      requestId.lastTime = timestamp;\n\n      // Clear canvas\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      if (!isPaused && !isGameOver) {\n        // Update paddle\n        objects.paddle.update(deltaTime);\n\n        // Handle paddle collision before updating ball\n        if (objects.ball.checkPaddleCollision(objects.paddle)) {\n          objects.ball.bounceOffPaddle(objects.paddle);\n          soundManagerRef.current.playPaddleHit();\n        }\n\n        // Only stick to paddle if not launched\n        if (!objects.ball.isLaunched) {\n          objects.ball.stickToPaddle(objects.paddle);\n        }\n\n        // Update ball position\n        objects.ball.update(deltaTime);\n\n        // Check for brick collisions\n        let remainingBricks = 0;\n        for (const brick of objects.bricks) {\n          if (!brick.isDestroyed()) {\n            remainingBricks++;\n            if (objects.ball.checkBrickCollision(brick)) {\n              objects.ball.bounceOffBrick(brick);\n              if (brick.hit()) {\n                setScore(prev => prev + 100);\n                soundManagerRef.current.playBrickHit();\n              }\n              break;\n            }\n          }\n        }\n\n        // Check if ball is out of bounds\n        if (objects.ball.y > canvasRef.current.height) {\n          handleBallOut(objects);\n        }\n\n        // Check if level is complete\n        if (objects.bricks.length > 0 && remainingBricks === 0) {\n          console.log('Level complete! Current level:', currentLevel);\n          const nextLevel = currentLevel + 1;\n          console.log('Attempting to transition to level:', nextLevel);\n          console.log('Max level:', levelManagerRef.current.getMaxLevel());\n          if (nextLevel <= levelManagerRef.current.getMaxLevel()) {\n            console.log('Starting next level');\n            setCurrentLevel(nextLevel);\n            // Level change effect will handle resetting ball and bricks\n          } else {\n            console.log('Game complete!');\n            setIsGameOver(true);\n            setIsVictory(true);\n            resetLevelState();\n          }\n        }\n      }\n\n      // Always draw game objects and HUD\n      drawGameObjects(ctx, objects);\n      drawHUD(ctx);\n      requestId.id = requestAnimationFrame(animate);\n    };\n    requestId.id = requestAnimationFrame(animate);\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      if (requestId.id) {\n        cancelAnimationFrame(requestId.id);\n      }\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [handleKeyDown, handleKeyUp, currentLevel, drawGameObjects, drawHUD, handleBallOut, isGameOver, isPaused, resetBallAndPaddle, setCurrentLevel, setIsGameOver, setIsVictory, setScore, resetLevelState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"game-canvas\",\n        width: 800,\n        height: 600,\n        tabIndex: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), isPaused && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pause-overlay\",\n        children: /*#__PURE__*/_jsxDEV(PauseMenu, {\n          onResume: handleResume,\n          onRestart: handleRestart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over-overlay\",\n        children: /*#__PURE__*/_jsxDEV(GameOver, {\n          score: score,\n          level: currentLevel,\n          onRestart: handleRestart,\n          isVictory: isVictory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 341,\n    columnNumber: 5\n  }, this);\n};\n_s(GameCanvas, \"D2gTzborbhINe1v5N7bDYiKZiaY=\", false, function () {\n  return [useLocation, useGameLoop];\n});\n_c = GameCanvas;\nexport default GameCanvas;\nvar _c;\n$RefreshReg$(_c, \"GameCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","useCallback","useLocation","Ball","Paddle","Brick","useGameLoop","LevelManager","PauseMenu","GameOver","SoundManager","jsxDEV","_jsxDEV","GameCanvas","_s","_location$state","location","canvasRef","gameObjectsRef","requestIdRef","id","lastTime","levelManagerRef","soundManagerRef","initialLevel","state","selectedLevel","isPaused","isGameOver","setScore","score","lives","setLives","currentLevel","setCurrentLevel","setIsPaused","setIsGameOver","setIsVictory","isVictory","resetLevel","current","cleanup","drawHUD","ctx","save","fillStyle","font","textAlign","fillText","width","restore","resetBallAndPaddle","canvas","paddleY","height","paddleWidth","paddle","x","y","dx","leftPressed","rightPressed","ball","radius","dy","isLaunched","handleBallOut","objects","newLives","resetLevelState","levelData","loadLevel","bricks","map","brick","type","drawGameObjects","forEach","isDestroyed","draw","handleKeyDown","e","key","toLowerCase","moveLeft","moveRight","launch","prev","handleKeyUp","stopLeft","stopRight","handleResume","handleRestart","console","log","requestId","animate","timestamp","_canvasRef$current","getContext","alpha","requestAnimationFrame","deltaTime","Math","min","fillRect","update","checkPaddleCollision","bounceOffPaddle","playPaddleHit","stickToPaddle","remainingBricks","checkBrickCollision","bounceOffBrick","hit","playBrickHit","length","nextLevel","getMaxLevel","window","addEventListener","cancelAnimationFrame","removeEventListener","className","children","ref","tabIndex","fileName","_jsxFileName","lineNumber","columnNumber","onResume","onRestart","level","_c","$RefreshReg$"],"sources":["C:/Users/noahm/OneDrive/Desktop/Coding/brick_blaster2/client/src/components/Game/GameCanvas.js"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Ball from './entities/Ball';\nimport Paddle from './entities/Paddle';\nimport Brick from './entities/Brick'; // Import Brick\nimport { useGameLoop } from './GameLoop';\nimport LevelManager from './LevelManager';\nimport PauseMenu from '../UI/PauseMenu';\nimport GameOver from '../UI/GameOver';\nimport SoundManager from '../../utils/SoundManager';\nimport '../../styles/components/GameCanvas.css';\n\nconst GameCanvas = () => {\n  const location = useLocation();\n  const canvasRef = useRef(null);\n  const gameObjectsRef = useRef(null);\n  const requestIdRef = useRef({ id: null, lastTime: null });\n  const levelManagerRef = useRef(new LevelManager());\n  const soundManagerRef = useRef(new SoundManager());\n\n  // Get the selected level from navigation state, default to 1\n  const initialLevel = location.state?.selectedLevel || 1;\n\n  const {\n    isPaused,\n    isGameOver,\n    setScore,\n    score,\n    lives,\n    setLives,\n    currentLevel,\n    setCurrentLevel,\n    setIsPaused,\n    setIsGameOver,\n    setIsVictory,\n    isVictory,\n    resetLevel\n  } = useGameLoop(initialLevel);\n\n  // Initialize level manager and sound manager\n  useEffect(() => {\n    levelManagerRef.current = new LevelManager();\n    soundManagerRef.current = new SoundManager();\n    \n    // Set initial level\n    setCurrentLevel(initialLevel);\n    \n    return () => {\n      soundManagerRef.current.cleanup();\n    };\n  }, [initialLevel, setCurrentLevel]);\n\n  const drawHUD = useCallback((ctx) => {\n    ctx.save();\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '20px Arial';\n    \n    // Draw score\n    ctx.textAlign = 'left';\n    ctx.fillText(`Score: ${score}`, 10, 30);\n    \n    // Draw level\n    ctx.textAlign = 'center';\n    ctx.fillText(`Level ${currentLevel}`, canvasRef.current.width / 2, 30);\n    \n    // Draw lives\n    ctx.textAlign = 'right';\n    ctx.fillText(`Lives: ${lives}`, canvasRef.current.width - 10, 30);\n    ctx.restore();\n  }, [score, lives, currentLevel]);\n\n  const resetBallAndPaddle = useCallback(() => {\n    if (!gameObjectsRef.current || !canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const paddleY = canvas.height - 40;\n    const paddleWidth = 100;\n    \n    // Reset paddle\n    const paddle = gameObjectsRef.current.paddle;\n    paddle.x = canvas.width / 2 - paddleWidth / 2;\n    paddle.y = paddleY;\n    paddle.dx = 0;\n    paddle.leftPressed = false;\n    paddle.rightPressed = false;\n    \n    // Reset ball\n    const ball = gameObjectsRef.current.ball;\n    ball.x = canvas.width / 2;\n    ball.y = paddleY - ball.radius;\n    ball.dx = 0;\n    ball.dy = 0;\n    ball.isLaunched = false;\n  }, []);\n\n  const handleBallOut = useCallback((objects) => {\n    const newLives = lives - 1;\n    setLives(newLives);\n    \n    if (newLives <= 0) {\n      setIsGameOver(true);\n      setIsVictory(false);\n      resetLevel();\n    } else {\n      resetBallAndPaddle();\n    }\n  }, [lives, setLives, setIsGameOver, setIsVictory, resetLevel, resetBallAndPaddle]);\n\n  const resetLevelState = useCallback(() => {\n    if (!gameObjectsRef.current) return;\n\n    // Get fresh level data for the current level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    \n    // Create new Brick instances to ensure clean state\n    gameObjectsRef.current.bricks = levelData.bricks.map(brick => {\n      return new Brick(brick.x, brick.y, brick.width, brick.height, brick.type);\n    });\n  }, [currentLevel]);\n\n  const drawGameObjects = useCallback((ctx, objects) => {\n    if (!ctx || !objects) return;\n    \n    ctx.save();\n    objects.bricks.forEach(brick => {\n      if (!brick.isDestroyed()) {\n        brick.draw(ctx);\n      }\n    });\n    objects.ball.draw(ctx);\n    objects.paddle.draw(ctx);\n    ctx.restore();\n  }, []);\n\n  const handleKeyDown = useCallback((e) => {\n    if (isGameOver) return;\n    \n    const objects = gameObjectsRef.current;\n    switch (e.key.toLowerCase()) {\n      case 'a':\n      case 'arrowleft':\n        if (!isPaused) objects.paddle.moveLeft();\n        break;\n      case 'd':\n      case 'arrowright':\n        if (!isPaused) objects.paddle.moveRight();\n        break;\n      case ' ':\n        if (!isPaused && objects.ball) objects.ball.launch();\n        break;\n      case 'escape':\n        setIsPaused(prev => !prev);\n        break;\n      default:\n        break;\n    }\n  }, [isPaused, isGameOver, setIsPaused]);\n\n  const handleKeyUp = useCallback((e) => {\n    if (isGameOver || isPaused) return;\n    \n    const objects = gameObjectsRef.current;\n    switch (e.key.toLowerCase()) {\n      case 'a':\n      case 'arrowleft':\n        objects.paddle.stopLeft();\n        break;\n      case 'd':\n      case 'arrowright':\n        objects.paddle.stopRight();\n        break;\n      default:\n        break;\n    }\n  }, [isPaused, isGameOver]);\n\n  const handleResume = useCallback(() => {\n    setIsPaused(false);\n  }, [setIsPaused]);\n\n  const handleRestart = useCallback(() => {\n    // Reset game state\n    setIsPaused(false);\n    setIsGameOver(false);\n    setIsVictory(false);\n    setScore(0);\n    setLives(3);\n    setCurrentLevel(1);\n    \n    // Reset level manager to ensure fresh state\n    levelManagerRef.current = new LevelManager();\n    \n    // Reset game objects and level\n    resetLevelState();\n    resetBallAndPaddle();\n    \n    // Ensure ball is not launched\n    if (gameObjectsRef.current) {\n      gameObjectsRef.current.ball.isLaunched = false;\n    }\n  }, [setIsPaused, setIsGameOver, setIsVictory, setScore, setLives, setCurrentLevel, resetLevelState, resetBallAndPaddle]);\n\n  useEffect(() => {\n    if (!gameObjectsRef.current) return;\n    \n    console.log('Level changed to:', currentLevel);\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    gameObjectsRef.current.bricks = levelData.bricks.map(brick => \n      new Brick(brick.x, brick.y, brick.width, brick.height, brick.type)\n    );\n    resetBallAndPaddle();\n  }, [currentLevel, resetBallAndPaddle]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    canvas.width = 800;\n    canvas.height = 600;\n\n    // Initialize game objects\n    const paddleY = canvas.height - 40;\n    const paddleWidth = 100;\n    \n    gameObjectsRef.current = {\n      paddle: new Paddle(canvas.width / 2 - paddleWidth / 2, paddleY),\n      ball: new Ball(canvas.width / 2, paddleY - 10),\n      bricks: []\n    };\n\n    // Load initial level\n    const levelData = levelManagerRef.current.loadLevel(currentLevel);\n    gameObjectsRef.current.bricks = levelData.bricks;\n\n    // Store animation ID in a variable that will be captured in the cleanup\n    const requestId = requestIdRef.current;\n    const animate = (timestamp) => {\n      const ctx = canvasRef.current?.getContext('2d', { alpha: false });\n      const objects = gameObjectsRef.current;\n\n      if (!ctx || !objects) {\n        requestId.id = requestAnimationFrame(animate);\n        return;\n      }\n\n      if (!requestId.lastTime) {\n        requestId.lastTime = timestamp;\n        requestId.id = requestAnimationFrame(animate);\n        return;\n      }\n\n      const deltaTime = Math.min((timestamp - requestId.lastTime) / 1000, 0.032);\n      requestId.lastTime = timestamp;\n\n      // Clear canvas\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n      if (!isPaused && !isGameOver) {\n        // Update paddle\n        objects.paddle.update(deltaTime);\n        \n        // Handle paddle collision before updating ball\n        if (objects.ball.checkPaddleCollision(objects.paddle)) {\n          objects.ball.bounceOffPaddle(objects.paddle);\n          soundManagerRef.current.playPaddleHit();\n        }\n\n        // Only stick to paddle if not launched\n        if (!objects.ball.isLaunched) {\n          objects.ball.stickToPaddle(objects.paddle);\n        }\n\n        // Update ball position\n        objects.ball.update(deltaTime);\n\n        // Check for brick collisions\n        let remainingBricks = 0;\n        \n        for (const brick of objects.bricks) {\n          if (!brick.isDestroyed()) {\n            remainingBricks++;\n            if (objects.ball.checkBrickCollision(brick)) {\n              objects.ball.bounceOffBrick(brick);\n              if (brick.hit()) {\n                setScore(prev => prev + 100);\n                soundManagerRef.current.playBrickHit();\n              }\n              break;\n            }\n          }\n        }\n\n        // Check if ball is out of bounds\n        if (objects.ball.y > canvasRef.current.height) {\n          handleBallOut(objects);\n        }\n\n        // Check if level is complete\n        if (objects.bricks.length > 0 && remainingBricks === 0) {\n          console.log('Level complete! Current level:', currentLevel);\n          const nextLevel = currentLevel + 1;\n          console.log('Attempting to transition to level:', nextLevel);\n          console.log('Max level:', levelManagerRef.current.getMaxLevel());\n          \n          if (nextLevel <= levelManagerRef.current.getMaxLevel()) {\n            console.log('Starting next level');\n            setCurrentLevel(nextLevel);\n            // Level change effect will handle resetting ball and bricks\n          } else {\n            console.log('Game complete!');\n            setIsGameOver(true);\n            setIsVictory(true);\n            resetLevelState();\n          }\n        }\n      }\n\n      // Always draw game objects and HUD\n      drawGameObjects(ctx, objects);\n      drawHUD(ctx);\n\n      requestId.id = requestAnimationFrame(animate);\n    };\n    requestId.id = requestAnimationFrame(animate);\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      if (requestId.id) {\n        cancelAnimationFrame(requestId.id);\n      }\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [handleKeyDown, handleKeyUp, currentLevel, drawGameObjects, drawHUD, handleBallOut, \n      isGameOver, isPaused, resetBallAndPaddle, setCurrentLevel, setIsGameOver, setIsVictory, setScore, resetLevelState]);\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"canvas-wrapper\">\n        <canvas\n          ref={canvasRef}\n          className=\"game-canvas\"\n          width={800}\n          height={600}\n          tabIndex={0}\n        />\n        {isPaused && (\n          <div className=\"pause-overlay\">\n            <PauseMenu\n              onResume={handleResume}\n              onRestart={handleRestart}\n            />\n          </div>\n        )}\n        {isGameOver && (\n          <div className=\"game-over-overlay\">\n            <GameOver\n              score={score}\n              level={currentLevel}\n              onRestart={handleRestart}\n              isVictory={isVictory}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GameCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}