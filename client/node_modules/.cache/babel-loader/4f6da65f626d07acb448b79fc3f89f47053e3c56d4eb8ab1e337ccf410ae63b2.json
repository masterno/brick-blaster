{"ast":null,"code":"import Brick from './entities/Brick';\nclass LevelManager {\n  constructor() {\n    this.currentLevel = 0;\n    this.initializeLevels();\n  }\n  initializeLevels() {\n    this.levels = [{\n      name: 'Basic Training',\n      speed: 1,\n      backgroundColor: '#1a1a1a'\n    }, {\n      name: 'Advanced Challenge',\n      speed: 1.2,\n      backgroundColor: '#1a1a2a'\n    }, {\n      name: 'Expert Mode',\n      speed: 1.5,\n      backgroundColor: '#1a2a2a'\n    }, {\n      name: 'Master Challenge',\n      speed: 1.8,\n      backgroundColor: '#2a1a2a'\n    }];\n  }\n  createBasicLevel() {\n    const bricks = [];\n    const brickWidth = 80;\n    const brickHeight = 20;\n    const offsetTop = 60;\n    const offsetLeft = (800 - brickWidth * 10) / 2; // Center 10 bricks horizontally\n\n    // Create a simple pattern for beginners\n    for (let row = 0; row < 3; row++) {\n      for (let col = 0; col < 10; col++) {\n        const x = col * brickWidth + offsetLeft;\n        const y = row * brickHeight + offsetTop;\n        bricks.push(new Brick(x, y, brickWidth, brickHeight, 'standard'));\n      }\n    }\n    return bricks;\n  }\n  createAdvancedLevel() {\n    const bricks = [];\n    const brickWidth = 80;\n    const brickHeight = 20;\n    const offsetTop = 60;\n    const offsetLeft = (800 - brickWidth * 10) / 2;\n\n    // Create a V-shaped pattern with mixed brick types\n    for (let row = 0; row < 6; row++) {\n      for (let col = 0; col < 10; col++) {\n        // Skip bricks to create V shape\n        if (row < 4 && (col < row || col > 9 - row)) continue;\n        const x = col * brickWidth + offsetLeft;\n        const y = row * brickHeight + offsetTop;\n        let type = 'standard';\n        if (row === 0) {\n          type = 'durable'; // Top row is durable\n        } else if (row === 5) {\n          type = 'explosive'; // Bottom row is explosive\n        }\n        bricks.push(new Brick(x, y, brickWidth, brickHeight, type));\n      }\n    }\n    return bricks;\n  }\n  createExpertLevel() {\n    const bricks = [];\n    const brickWidth = 80;\n    const brickHeight = 20;\n    const offsetTop = 60;\n    const offsetLeft = (800 - brickWidth * 10) / 2;\n\n    // Create a complex pattern with all brick types\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 10; col++) {\n        // Create a checkerboard pattern with gaps\n        if ((row + col) % 2 === 0) {\n          const x = col * brickWidth + offsetLeft;\n          const y = row * brickHeight + offsetTop;\n          let type = 'standard';\n          if (row < 2) {\n            type = 'durable';\n          } else if (row === 7) {\n            type = 'explosive';\n          } else if (col === 0 || col === 9) {\n            type = 'unbreakable';\n          }\n          bricks.push(new Brick(x, y, brickWidth, brickHeight, type));\n        }\n      }\n    }\n    return bricks;\n  }\n  createMasterLevel() {\n    const bricks = [];\n    const brickWidth = 80;\n    const brickHeight = 20;\n    const offsetTop = 60;\n    const offsetLeft = (800 - brickWidth * 10) / 2;\n\n    // Create an intricate pattern with all brick types\n    for (let row = 0; row < 10; row++) {\n      for (let col = 0; col < 10; col++) {\n        const x = col * brickWidth + offsetLeft;\n        const y = row * brickHeight + offsetTop;\n        let type = 'standard';\n\n        // Create a fortress-like pattern\n        if (row === 0 || row === 9 || col === 0 || col === 9) {\n          type = 'unbreakable';\n        } else if (row === 1 || row === 8) {\n          type = 'durable';\n        } else if ((row === 4 || row === 5) && (col === 4 || col === 5)) {\n          type = 'explosive';\n        }\n        bricks.push(new Brick(x, y, brickWidth, brickHeight, type));\n      }\n    }\n    return bricks;\n  }\n  loadLevel(levelNumber) {\n    try {\n      // Ensure levelNumber is valid (1-based)\n      const index = Math.max(0, Math.min(levelNumber - 1, this.levels.length - 1));\n      this.currentLevel = index;\n\n      // Create a new level data object\n      const levelData = {\n        name: this.levels[index].name,\n        speed: this.levels[index].speed,\n        backgroundColor: this.levels[index].backgroundColor,\n        bricks: []\n      };\n\n      // Generate fresh bricks for this level\n      switch (index) {\n        case 0:\n          levelData.bricks = this.createBasicLevel();\n          break;\n        case 1:\n          levelData.bricks = this.createAdvancedLevel();\n          break;\n        case 2:\n          levelData.bricks = this.createExpertLevel();\n          break;\n        case 3:\n          levelData.bricks = this.createMasterLevel();\n          break;\n        default:\n          levelData.bricks = this.createBasicLevel();\n      }\n      return levelData;\n    } catch (error) {\n      console.error('Error loading level:', error);\n      // Return a basic level as fallback\n      return {\n        name: 'Basic Training',\n        speed: 1,\n        backgroundColor: '#1a1a1a',\n        bricks: this.createBasicLevel()\n      };\n    }\n  }\n  getMaxLevel() {\n    return this.levels.length;\n  }\n}\nexport default LevelManager;","map":{"version":3,"names":["Brick","LevelManager","constructor","currentLevel","initializeLevels","levels","name","speed","backgroundColor","createBasicLevel","bricks","brickWidth","brickHeight","offsetTop","offsetLeft","row","col","x","y","push","createAdvancedLevel","type","createExpertLevel","createMasterLevel","loadLevel","levelNumber","index","Math","max","min","length","levelData","error","console","getMaxLevel"],"sources":["C:/Users/noahm/OneDrive/Desktop/Coding/brick_blaster2/client/src/components/Game/LevelManager.js"],"sourcesContent":["import Brick from './entities/Brick';\n\nclass LevelManager {\n  constructor() {\n    this.currentLevel = 0;\n    this.initializeLevels();\n  }\n\n  initializeLevels() {\n    this.levels = [\n      {\n        name: 'Basic Training',\n        speed: 1,\n        backgroundColor: '#1a1a1a'\n      },\n      {\n        name: 'Advanced Challenge',\n        speed: 1.2,\n        backgroundColor: '#1a1a2a'\n      },\n      {\n        name: 'Expert Mode',\n        speed: 1.5,\n        backgroundColor: '#1a2a2a'\n      },\n      {\n        name: 'Master Challenge',\n        speed: 1.8,\n        backgroundColor: '#2a1a2a'\n      }\n    ];\n  }\n\n  createBasicLevel() {\n    const bricks = [];\n    const brickWidth = 80;\n    const brickHeight = 20;\n    const offsetTop = 60;\n    const offsetLeft = (800 - (brickWidth * 10)) / 2; // Center 10 bricks horizontally\n\n    // Create a simple pattern for beginners\n    for (let row = 0; row < 3; row++) {\n      for (let col = 0; col < 10; col++) {\n        const x = (col * brickWidth) + offsetLeft;\n        const y = (row * brickHeight) + offsetTop;\n        bricks.push(new Brick(x, y, brickWidth, brickHeight, 'standard'));\n      }\n    }\n\n    return bricks;\n  }\n\n  createAdvancedLevel() {\n    const bricks = [];\n    const brickWidth = 80;\n    const brickHeight = 20;\n    const offsetTop = 60;\n    const offsetLeft = (800 - (brickWidth * 10)) / 2;\n\n    // Create a V-shaped pattern with mixed brick types\n    for (let row = 0; row < 6; row++) {\n      for (let col = 0; col < 10; col++) {\n        // Skip bricks to create V shape\n        if (row < 4 && (col < row || col > 9 - row)) continue;\n\n        const x = (col * brickWidth) + offsetLeft;\n        const y = (row * brickHeight) + offsetTop;\n        \n        let type = 'standard';\n        if (row === 0) {\n          type = 'durable'; // Top row is durable\n        } else if (row === 5) {\n          type = 'explosive'; // Bottom row is explosive\n        }\n        \n        bricks.push(new Brick(x, y, brickWidth, brickHeight, type));\n      }\n    }\n\n    return bricks;\n  }\n\n  createExpertLevel() {\n    const bricks = [];\n    const brickWidth = 80;\n    const brickHeight = 20;\n    const offsetTop = 60;\n    const offsetLeft = (800 - (brickWidth * 10)) / 2;\n\n    // Create a complex pattern with all brick types\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 10; col++) {\n        // Create a checkerboard pattern with gaps\n        if ((row + col) % 2 === 0) {\n          const x = (col * brickWidth) + offsetLeft;\n          const y = (row * brickHeight) + offsetTop;\n          \n          let type = 'standard';\n          if (row < 2) {\n            type = 'durable';\n          } else if (row === 7) {\n            type = 'explosive';\n          } else if (col === 0 || col === 9) {\n            type = 'unbreakable';\n          }\n          \n          bricks.push(new Brick(x, y, brickWidth, brickHeight, type));\n        }\n      }\n    }\n\n    return bricks;\n  }\n\n  createMasterLevel() {\n    const bricks = [];\n    const brickWidth = 80;\n    const brickHeight = 20;\n    const offsetTop = 60;\n    const offsetLeft = (800 - (brickWidth * 10)) / 2;\n\n    // Create an intricate pattern with all brick types\n    for (let row = 0; row < 10; row++) {\n      for (let col = 0; col < 10; col++) {\n        const x = (col * brickWidth) + offsetLeft;\n        const y = (row * brickHeight) + offsetTop;\n        \n        let type = 'standard';\n        \n        // Create a fortress-like pattern\n        if (row === 0 || row === 9 || col === 0 || col === 9) {\n          type = 'unbreakable';\n        } else if (row === 1 || row === 8) {\n          type = 'durable';\n        } else if ((row === 4 || row === 5) && (col === 4 || col === 5)) {\n          type = 'explosive';\n        }\n        \n        bricks.push(new Brick(x, y, brickWidth, brickHeight, type));\n      }\n    }\n\n    return bricks;\n  }\n\n  loadLevel(levelNumber) {\n    try {\n      // Ensure levelNumber is valid (1-based)\n      const index = Math.max(0, Math.min(levelNumber - 1, this.levels.length - 1));\n      this.currentLevel = index;\n\n      // Create a new level data object\n      const levelData = {\n        name: this.levels[index].name,\n        speed: this.levels[index].speed,\n        backgroundColor: this.levels[index].backgroundColor,\n        bricks: []\n      };\n\n      // Generate fresh bricks for this level\n      switch(index) {\n        case 0:\n          levelData.bricks = this.createBasicLevel();\n          break;\n        case 1:\n          levelData.bricks = this.createAdvancedLevel();\n          break;\n        case 2:\n          levelData.bricks = this.createExpertLevel();\n          break;\n        case 3:\n          levelData.bricks = this.createMasterLevel();\n          break;\n        default:\n          levelData.bricks = this.createBasicLevel();\n      }\n\n      return levelData;\n    } catch (error) {\n      console.error('Error loading level:', error);\n      // Return a basic level as fallback\n      return {\n        name: 'Basic Training',\n        speed: 1,\n        backgroundColor: '#1a1a1a',\n        bricks: this.createBasicLevel()\n      };\n    }\n  }\n\n  getMaxLevel() {\n    return this.levels.length;\n  }\n}\n\nexport default LevelManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}