{"ast":null,"code":"class Ball {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.radius = 8;\n    this.baseSpeed = 400;\n    this.speed = this.baseSpeed;\n    this.dx = 0;\n    this.dy = 0;\n    this.isLaunched = false;\n    this.canvasWidth = 800;\n    this.canvasHeight = 600;\n    this.initialX = x;\n    this.initialY = y;\n  }\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.fill();\n    ctx.closePath();\n  }\n  update(deltaTime) {\n    if (!this.isLaunched) return;\n\n    // Update position\n    this.x += this.dx * deltaTime;\n    this.y += this.dy * deltaTime;\n\n    // Handle wall collisions\n    if (this.x - this.radius <= 0) {\n      this.x = this.radius;\n      this.dx = Math.abs(this.dx);\n    }\n    if (this.x + this.radius >= this.canvasWidth) {\n      this.x = this.canvasWidth - this.radius;\n      this.dx = -Math.abs(this.dx);\n    }\n    if (this.y - this.radius <= 0) {\n      this.y = this.radius;\n      this.dy = Math.abs(this.dy);\n    }\n\n    // Maintain constant speed\n    const currentSpeed = Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n    if (Math.abs(currentSpeed - this.speed) > 0.1) {\n      const speedFactor = this.speed / currentSpeed;\n      this.dx *= speedFactor;\n      this.dy *= speedFactor;\n    }\n  }\n  launch() {\n    if (!this.isLaunched) {\n      this.isLaunched = true;\n      const angle = -Math.PI / 4; // -45 degrees\n      this.dx = this.speed * Math.cos(angle);\n      this.dy = this.speed * Math.sin(angle);\n    }\n  }\n  reset() {\n    this.x = this.initialX;\n    this.y = this.initialY;\n    this.dx = 0;\n    this.dy = 0;\n    this.isLaunched = false;\n    this.speed = this.baseSpeed;\n  }\n  stickToPaddle(paddle) {\n    if (!this.isLaunched) {\n      this.x = paddle.x + paddle.width / 2;\n      this.y = paddle.y - this.radius;\n    }\n  }\n  bounceOffPaddle(paddle) {\n    if (!this.isLaunched) return;\n\n    // Calculate relative position of ball hit on paddle\n    const relativeIntersectX = (this.x - (paddle.x + paddle.width / 2)) / (paddle.width / 2);\n\n    // Calculate bounce angle (-60 to 60 degrees)\n    const bounceAngle = relativeIntersectX * Math.PI / 3;\n\n    // Set new velocity\n    this.dx = this.speed * Math.sin(bounceAngle);\n    this.dy = -Math.abs(this.speed * Math.cos(bounceAngle));\n\n    // Ensure ball is above paddle\n    this.y = paddle.y - this.radius;\n  }\n  bounceOffBrick(brick) {\n    if (!this.isLaunched) return;\n\n    // Calculate distances between ball and brick edges\n    const ballRight = this.x + this.radius;\n    const ballLeft = this.x - this.radius;\n    const ballTop = this.y - this.radius;\n    const ballBottom = this.y + this.radius;\n    const brickRight = brick.x + brick.width;\n    const brickLeft = brick.x;\n    const brickTop = brick.y;\n    const brickBottom = brick.y + brick.height;\n\n    // Calculate overlaps\n    const leftOverlap = ballRight - brickLeft;\n    const rightOverlap = brickRight - ballLeft;\n    const topOverlap = ballBottom - brickTop;\n    const bottomOverlap = brickBottom - ballTop;\n\n    // Find smallest overlap\n    const overlaps = [leftOverlap, rightOverlap, topOverlap, bottomOverlap];\n    const minOverlap = Math.min(...overlaps);\n\n    // Determine which side was hit and bounce accordingly\n    if (minOverlap === leftOverlap || minOverlap === rightOverlap) {\n      // Horizontal collision\n      this.dx = -this.dx;\n    } else {\n      // Vertical collision\n      this.dy = -this.dy;\n    }\n  }\n  checkPaddleCollision(paddle) {\n    return this.isLaunched && this.x + this.radius > paddle.x && this.x - this.radius < paddle.x + paddle.width && this.y + this.radius > paddle.y && this.y - this.radius < paddle.y + paddle.height;\n  }\n  checkBrickCollision(brick) {\n    if (!this.isLaunched || brick.isDestroyed()) return false;\n    return this.x + this.radius > brick.x && this.x - this.radius < brick.x + brick.width && this.y + this.radius > brick.y && this.y - this.radius < brick.y + brick.height;\n  }\n}\nexport default Ball;","map":{"version":3,"names":["Ball","constructor","x","y","radius","baseSpeed","speed","dx","dy","isLaunched","canvasWidth","canvasHeight","initialX","initialY","draw","ctx","beginPath","arc","Math","PI","fillStyle","fill","closePath","update","deltaTime","abs","currentSpeed","sqrt","speedFactor","launch","angle","cos","sin","reset","stickToPaddle","paddle","width","bounceOffPaddle","relativeIntersectX","bounceAngle","bounceOffBrick","brick","ballRight","ballLeft","ballTop","ballBottom","brickRight","brickLeft","brickTop","brickBottom","height","leftOverlap","rightOverlap","topOverlap","bottomOverlap","overlaps","minOverlap","min","checkPaddleCollision","checkBrickCollision","isDestroyed"],"sources":["C:/Users/noahm/OneDrive/Desktop/Coding/brick_blaster2/client/src/components/Game/entities/Ball.js"],"sourcesContent":["class Ball {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.radius = 8;\n    this.baseSpeed = 400;\n    this.speed = this.baseSpeed;\n    this.dx = 0;\n    this.dy = 0;\n    this.isLaunched = false;\n    this.canvasWidth = 800;\n    this.canvasHeight = 600;\n    this.initialX = x;\n    this.initialY = y;\n  }\n\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  update(deltaTime) {\n    if (!this.isLaunched) return;\n    \n    // Update position\n    this.x += this.dx * deltaTime;\n    this.y += this.dy * deltaTime;\n\n    // Handle wall collisions\n    if (this.x - this.radius <= 0) {\n      this.x = this.radius;\n      this.dx = Math.abs(this.dx);\n    }\n    if (this.x + this.radius >= this.canvasWidth) {\n      this.x = this.canvasWidth - this.radius;\n      this.dx = -Math.abs(this.dx);\n    }\n    if (this.y - this.radius <= 0) {\n      this.y = this.radius;\n      this.dy = Math.abs(this.dy);\n    }\n\n    // Maintain constant speed\n    const currentSpeed = Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n    if (Math.abs(currentSpeed - this.speed) > 0.1) {\n      const speedFactor = this.speed / currentSpeed;\n      this.dx *= speedFactor;\n      this.dy *= speedFactor;\n    }\n  }\n\n  launch() {\n    if (!this.isLaunched) {\n      this.isLaunched = true;\n      const angle = -Math.PI / 4; // -45 degrees\n      this.dx = this.speed * Math.cos(angle);\n      this.dy = this.speed * Math.sin(angle);\n    }\n  }\n\n  reset() {\n    this.x = this.initialX;\n    this.y = this.initialY;\n    this.dx = 0;\n    this.dy = 0;\n    this.isLaunched = false;\n    this.speed = this.baseSpeed;\n  }\n\n  stickToPaddle(paddle) {\n    if (!this.isLaunched) {\n      this.x = paddle.x + paddle.width / 2;\n      this.y = paddle.y - this.radius;\n    }\n  }\n\n  bounceOffPaddle(paddle) {\n    if (!this.isLaunched) return;\n\n    // Calculate relative position of ball hit on paddle\n    const relativeIntersectX = (this.x - (paddle.x + paddle.width / 2)) / (paddle.width / 2);\n    \n    // Calculate bounce angle (-60 to 60 degrees)\n    const bounceAngle = relativeIntersectX * Math.PI / 3;\n    \n    // Set new velocity\n    this.dx = this.speed * Math.sin(bounceAngle);\n    this.dy = -Math.abs(this.speed * Math.cos(bounceAngle));\n    \n    // Ensure ball is above paddle\n    this.y = paddle.y - this.radius;\n  }\n\n  bounceOffBrick(brick) {\n    if (!this.isLaunched) return;\n\n    // Calculate distances between ball and brick edges\n    const ballRight = this.x + this.radius;\n    const ballLeft = this.x - this.radius;\n    const ballTop = this.y - this.radius;\n    const ballBottom = this.y + this.radius;\n\n    const brickRight = brick.x + brick.width;\n    const brickLeft = brick.x;\n    const brickTop = brick.y;\n    const brickBottom = brick.y + brick.height;\n\n    // Calculate overlaps\n    const leftOverlap = ballRight - brickLeft;\n    const rightOverlap = brickRight - ballLeft;\n    const topOverlap = ballBottom - brickTop;\n    const bottomOverlap = brickBottom - ballTop;\n\n    // Find smallest overlap\n    const overlaps = [leftOverlap, rightOverlap, topOverlap, bottomOverlap];\n    const minOverlap = Math.min(...overlaps);\n\n    // Determine which side was hit and bounce accordingly\n    if (minOverlap === leftOverlap || minOverlap === rightOverlap) {\n      // Horizontal collision\n      this.dx = -this.dx;\n    } else {\n      // Vertical collision\n      this.dy = -this.dy;\n    }\n  }\n\n  checkPaddleCollision(paddle) {\n    return (\n      this.isLaunched &&\n      this.x + this.radius > paddle.x &&\n      this.x - this.radius < paddle.x + paddle.width &&\n      this.y + this.radius > paddle.y &&\n      this.y - this.radius < paddle.y + paddle.height\n    );\n  }\n\n  checkBrickCollision(brick) {\n    if (!this.isLaunched || brick.isDestroyed()) return false;\n\n    return (\n      this.x + this.radius > brick.x &&\n      this.x - this.radius < brick.x + brick.width &&\n      this.y + this.radius > brick.y &&\n      this.y - this.radius < brick.y + brick.height\n    );\n  }\n}\n\nexport default Ball;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}