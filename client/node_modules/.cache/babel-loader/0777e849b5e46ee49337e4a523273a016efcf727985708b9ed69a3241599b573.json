{"ast":null,"code":"import Brick from './entities/Brick';\nclass LevelManager {\n  constructor() {\n    this.currentLevel = 1;\n    this.levels = {};\n    this.brickWidth = 60;\n    this.brickHeight = 20;\n    this.padding = 5;\n    this.generateDefaultLevels();\n  }\n  generateDefaultLevels() {\n    // Level 1: Basic pattern\n    this.levels[1] = {\n      layout: [['S', 'S', 'S', 'S', 'S', 'S', 'S', 'S'], ['S', 'S', 'S', 'S', 'S', 'S', 'S', 'S'], ['D', 'D', 'D', 'D', 'D', 'D', 'D', 'D']],\n      speed: 1.0,\n      powerUpProbability: 0.1\n    };\n\n    // Level 2: Mixed brick types\n    this.levels[2] = {\n      layout: [['S', 'D', 'S', 'D', 'S', 'D', 'S', 'D'], ['D', 'S', 'D', 'S', 'D', 'S', 'D', 'S'], ['U', 'S', 'S', 'S', 'S', 'S', 'S', 'U']],\n      speed: 1.2,\n      powerUpProbability: 0.15\n    };\n\n    // Level 3: Complex pattern\n    this.levels[3] = {\n      layout: [['U', 'D', 'D', 'D', 'D', 'D', 'D', 'U'], ['D', 'S', 'S', 'S', 'S', 'S', 'S', 'D'], ['D', 'S', 'E', 'E', 'E', 'E', 'S', 'D'], ['D', 'S', 'S', 'S', 'S', 'S', 'S', 'D'], ['U', 'D', 'D', 'D', 'D', 'D', 'D', 'U']],\n      speed: 1.4,\n      powerUpProbability: 0.2\n    };\n  }\n  loadLevel(levelNumber) {\n    if (!this.levels[levelNumber]) {\n      throw new Error(`Level ${levelNumber} does not exist`);\n    }\n    this.currentLevel = levelNumber;\n    const level = this.levels[levelNumber];\n    const bricks = [];\n    const startX = this.padding;\n    const startY = 50; // Starting Y position for the first row\n\n    level.layout.forEach((row, rowIndex) => {\n      row.forEach((brickType, colIndex) => {\n        const x = startX + (this.brickWidth + this.padding) * colIndex;\n        const y = startY + (this.brickHeight + this.padding) * rowIndex;\n        const type = this.getBrickType(brickType);\n        if (type) {\n          bricks.push(new Brick(x, y, this.brickWidth, this.brickHeight, type));\n        }\n      });\n    });\n    return {\n      bricks,\n      speed: level.speed,\n      powerUpProbability: level.powerUpProbability\n    };\n  }\n  getBrickType(code) {\n    switch (code) {\n      case 'S':\n        return 'standard';\n      case 'D':\n        return 'durable';\n      case 'U':\n        return 'unbreakable';\n      case 'E':\n        return 'explosive';\n      default:\n        return null;\n    }\n  }\n  getCurrentLevel() {\n    return this.currentLevel;\n  }\n  getMaxLevel() {\n    return Object.keys(this.levels).length;\n  }\n  isLevelComplete(bricks) {\n    // Check if all breakable bricks are destroyed\n    return bricks.every(brick => brick.broken || brick.type === 'unbreakable');\n  }\n\n  // Method to save custom level\n  saveCustomLevel(levelData) {\n    const levelNumber = Object.keys(this.levels).length + 1;\n    this.levels[levelNumber] = levelData;\n    return levelNumber;\n  }\n\n  // Method to load custom level from JSON\n  loadCustomLevel(levelData) {\n    try {\n      const level = JSON.parse(levelData);\n      return this.loadLevel(this.saveCustomLevel(level));\n    } catch (error) {\n      throw new Error('Invalid level data format');\n    }\n  }\n}\nexport default LevelManager;","map":{"version":3,"names":["Brick","LevelManager","constructor","currentLevel","levels","brickWidth","brickHeight","padding","generateDefaultLevels","layout","speed","powerUpProbability","loadLevel","levelNumber","Error","level","bricks","startX","startY","forEach","row","rowIndex","brickType","colIndex","x","y","type","getBrickType","push","code","getCurrentLevel","getMaxLevel","Object","keys","length","isLevelComplete","every","brick","broken","saveCustomLevel","levelData","loadCustomLevel","JSON","parse","error"],"sources":["c:/Users/noahm/OneDrive/Desktop/Coding/brick_blaster2/client/src/components/Game/LevelManager.js"],"sourcesContent":["import Brick from './entities/Brick';\n\nclass LevelManager {\n  constructor() {\n    this.currentLevel = 1;\n    this.levels = {};\n    this.brickWidth = 60;\n    this.brickHeight = 20;\n    this.padding = 5;\n    this.generateDefaultLevels();\n  }\n\n  generateDefaultLevels() {\n    // Level 1: Basic pattern\n    this.levels[1] = {\n      layout: [\n        ['S', 'S', 'S', 'S', 'S', 'S', 'S', 'S'],\n        ['S', 'S', 'S', 'S', 'S', 'S', 'S', 'S'],\n        ['D', 'D', 'D', 'D', 'D', 'D', 'D', 'D'],\n      ],\n      speed: 1.0,\n      powerUpProbability: 0.1\n    };\n\n    // Level 2: Mixed brick types\n    this.levels[2] = {\n      layout: [\n        ['S', 'D', 'S', 'D', 'S', 'D', 'S', 'D'],\n        ['D', 'S', 'D', 'S', 'D', 'S', 'D', 'S'],\n        ['U', 'S', 'S', 'S', 'S', 'S', 'S', 'U'],\n      ],\n      speed: 1.2,\n      powerUpProbability: 0.15\n    };\n\n    // Level 3: Complex pattern\n    this.levels[3] = {\n      layout: [\n        ['U', 'D', 'D', 'D', 'D', 'D', 'D', 'U'],\n        ['D', 'S', 'S', 'S', 'S', 'S', 'S', 'D'],\n        ['D', 'S', 'E', 'E', 'E', 'E', 'S', 'D'],\n        ['D', 'S', 'S', 'S', 'S', 'S', 'S', 'D'],\n        ['U', 'D', 'D', 'D', 'D', 'D', 'D', 'U'],\n      ],\n      speed: 1.4,\n      powerUpProbability: 0.2\n    };\n  }\n\n  loadLevel(levelNumber) {\n    if (!this.levels[levelNumber]) {\n      throw new Error(`Level ${levelNumber} does not exist`);\n    }\n\n    this.currentLevel = levelNumber;\n    const level = this.levels[levelNumber];\n    const bricks = [];\n    const startX = this.padding;\n    const startY = 50; // Starting Y position for the first row\n\n    level.layout.forEach((row, rowIndex) => {\n      row.forEach((brickType, colIndex) => {\n        const x = startX + (this.brickWidth + this.padding) * colIndex;\n        const y = startY + (this.brickHeight + this.padding) * rowIndex;\n        \n        const type = this.getBrickType(brickType);\n        if (type) {\n          bricks.push(new Brick(x, y, this.brickWidth, this.brickHeight, type));\n        }\n      });\n    });\n\n    return {\n      bricks,\n      speed: level.speed,\n      powerUpProbability: level.powerUpProbability\n    };\n  }\n\n  getBrickType(code) {\n    switch (code) {\n      case 'S': return 'standard';\n      case 'D': return 'durable';\n      case 'U': return 'unbreakable';\n      case 'E': return 'explosive';\n      default: return null;\n    }\n  }\n\n  getCurrentLevel() {\n    return this.currentLevel;\n  }\n\n  getMaxLevel() {\n    return Object.keys(this.levels).length;\n  }\n\n  isLevelComplete(bricks) {\n    // Check if all breakable bricks are destroyed\n    return bricks.every(brick => \n      brick.broken || brick.type === 'unbreakable'\n    );\n  }\n\n  // Method to save custom level\n  saveCustomLevel(levelData) {\n    const levelNumber = Object.keys(this.levels).length + 1;\n    this.levels[levelNumber] = levelData;\n    return levelNumber;\n  }\n\n  // Method to load custom level from JSON\n  loadCustomLevel(levelData) {\n    try {\n      const level = JSON.parse(levelData);\n      return this.loadLevel(this.saveCustomLevel(level));\n    } catch (error) {\n      throw new Error('Invalid level data format');\n    }\n  }\n}\n\nexport default LevelManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}